<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: homebrew | Ivan's Blog]]></title>
  <link href="http://blog.ivansiu.com/blog/categories/homebrew/atom.xml" rel="self"/>
  <link href="http://blog.ivansiu.com/"/>
  <updated>2021-01-15T16:59:58-08:00</updated>
  <id>http://blog.ivansiu.com/</id>
  <author>
    <name><![CDATA[Zigang "Ivan" Xiao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Source-highlight for Matlab/octave]]></title>
    <link href="http://blog.ivansiu.com/blog/2014/05/01/source-highlight-for-matlab-slash-octave/"/>
    <updated>2014-05-01T01:59:40-05:00</updated>
    <id>http://blog.ivansiu.com/blog/2014/05/01/source-highlight-for-matlab-slash-octave</id>
    <content type="html"><![CDATA[![](https://res.cloudinary.com/maomao/image/upload/v1491291930/blog/2014-05-01-source-highlight-for-matlab-slash-octave.png)

I recently worked with Matlab a lot. When in console, sometimes I want to use
`less` to quickly examine the file content, and I have already 
[set it up](http://superuser.com/a/71593)
such that it uses [source-highlight](http://www.gnu.org/software/src-highlite/)
to output colorful escape sequence to the console.
However, source-highlight does not come with a syntax support for Matlab
by default. Luckily, this
[post](http://blog.sina.com.cn/s/blog_4513dde60100o6o4.html) and 
[this](http://blog.sina.com.cn/s/blog_4513dde60101kpmr.html) (in Chinese) 
provides a solution.

<!-- more -->

First of all, install source-highlight using homebrew. 

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install source-highlight</span></code></pre></td></tr></table></div></figure>

Note that  source-highlight depends on boost, and as of the date of this post,
brew provides a precompiled library (bottle) for boost. However, the python
support is compiled against the system python, so if you installed a custom one
(say installed via homebrew)
and use it by default, brew will compile the boost from source instead, which
takes an extremely long time.  To prevent this, we need to unlink it first,
and link it back afterwards. That is,


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew unlink python
</span><span class='line'>brew link python    <span class="c"># after installation</span>
</span></code></pre></td></tr></table></div></figure>

Go to the following folder and create two files,
 
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> <span class="sb">`</span>brew --prefix <span class="nb">source</span>-highlight<span class="sb">`</span>/share/source-highlight
</span></code></pre></td></tr></table></div></figure>

<figure class='code'><figcaption><span>matlab.style</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="err">keyword</span> <span class="err">blue</span><span class="c1">;</span>
</span><span class='line'><span class="err">string</span> <span class="c1">#a020f0;</span>
</span><span class='line'><span class="err">comment</span> <span class="err">darkgreen</span><span class="c1">;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>matlab.lang</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="na">keyword</span> <span class="o">=</span> <span class="s">&quot;break|case|catch|classdef|continue|else|elseif|end|for|function|global|if|otherwise|parfor|persistent|return|spmd|switch|try|while&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="na">keyword</span> <span class="o">=</span> <span class="s">&#39;^\s*(break|case|catch|classdef|continue|else|elseif|end|for|function|global|if|otherwise|parfor|persistent|return|spmd|switch|try|while)(?=\s)&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="err">include</span> <span class="err">&quot;function.lang&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="na">state command start &#39;^\s*[a-zA-Z][\w]*(?</span><span class="o">=</span><span class="s">\s)(?!\s+\.?[*/+-:]\s+\w)(?!\s+=)&#39; begin</span>
</span><span class='line'><span class="s">        comment start &quot;%&quot;</span>
</span><span class='line'><span class="s">        string delim &#39;[[:blank:]]&#39; &#39;[^%;]*&#39;</span>
</span><span class='line'><span class="err">end</span>
</span><span class='line'>
</span><span class='line'><span class="err">comment</span> <span class="err">delim</span> <span class="err">&quot;%{&quot;</span> <span class="err">&quot;%}&quot;</span> <span class="err">multiline</span> <span class="err">nested</span>
</span><span class='line'><span class="err">comment</span> <span class="err">start</span> <span class="err">&quot;%&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="err">string</span> <span class="err">delim</span> <span class="err">&#39;(?&lt;![\w.])\&#39;&#39;</span> <span class="err">&quot;&#39;&quot;</span> <span class="err">escape</span> <span class="err">&quot;&#39;&#39;&quot;</span>
</span></code></pre></td></tr></table></div></figure>

Finally, edit `lang.map` to create a mapping for matlab file.

<figure class='code'><figcaption><span>lang.map</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s1">&#39;m = matlab.lang&#39;</span> &gt;&gt; lang.map
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
</feed>
