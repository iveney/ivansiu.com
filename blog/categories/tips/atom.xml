<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tips | Zigang Xiao]]></title>
  <link href="http://blog.ivansiu.com/blog/categories/tips/atom.xml" rel="self"/>
  <link href="http://blog.ivansiu.com/"/>
  <updated>2014-05-01T17:44:53-05:00</updated>
  <id>http://blog.ivansiu.com/</id>
  <author>
    <name><![CDATA[Zigang Xiao (Ivan)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Send ctrl-a in tmux after rebinding to it]]></title>
    <link href="http://blog.ivansiu.com/blog/2014/05/01/send-ctrl-a-in-tmux-after-rebinding-to-it/"/>
    <updated>2014-05-01T17:14:46-05:00</updated>
    <id>http://blog.ivansiu.com/blog/2014/05/01/send-ctrl-a-in-tmux-after-rebinding-to-it</id>
    <content type="html"><![CDATA[![](http://dl.dropboxusercontent.com/s/7l4vneadlcip8wd/2014-05-01-send-ctrl-a-in-tmux-after-rebinding-to-it.png)

While `tmux` provides much better functionality than `screen`,
most of us that work with tmux have been using `screen` for a long time,
and it is more comfortable for us to use `ctrl-a` than the default `ctrl-b`,
which is finger-strechy. Thus the first thing I will do after installing `tmux`
is to rebind the prefix to `ctrl-a`. That gives us the most handy way of
swapping last two windows by typing `ctrl-a ctrl-a`.

<!-- more -->

However, this comes for a price. That is, in a shell environment that
is integrated with `readline`, `ctrl-a` is used to jump the begining of line.
Now that it is mapped as prefix, we can no longer do that.

Surprisingly, the solution is pretty simple. Just use `ctrl-a a` to
send the prefix itself, and use `ctrl-a ctrl-a` to go to the last window.
Specifically, add these two lines in `~/.tmux.conf`:

``` bash ~/.tmux.conf 
bind a send-prefix
bind-key C-a last-window
```

[via](http://stackoverflow.com/questions/11557076/if-i-set-key-bind-of-c-b-to-c-a-in-tmux-how-can-i-move-the-cursor-to-the-beginni#comment15297769_11561128).]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Source-highlight for matlab/octave]]></title>
    <link href="http://blog.ivansiu.com/blog/2014/05/01/source-highlight-for-matlab-slash-octave/"/>
    <updated>2014-05-01T01:59:40-05:00</updated>
    <id>http://blog.ivansiu.com/blog/2014/05/01/source-highlight-for-matlab-slash-octave</id>
    <content type="html"><![CDATA[![](https://dl.dropboxusercontent.com/s/jqqno07xizfspkt/2014-05-01-source-highlight-for-matlab-slash-octave.png)

I recently worked with Matlab a lot. When in console, sometimes I want to use
`less` to quickly examine the file content, and I have already [set it up](http://superuser.com/a/71593)
such that it uses [source-highlight](http://www.gnu.org/software/src-highlite/)
to output colorful escape sequence to the console.
However, source-highlight does not come with a syntax support for Matlab
by default. Luckily, this [post](http://blog.sina.com.cn/s/blog_4513dde60100o6o4.html) (in Chinese) provides a solution.

<!-- more -->

First of all, install source-highlight using homebrew. 

```
brew install source-highlight
```

Note that  source-highlight depends on boost, and as of the date of this post,
brew provides a precompiled library (bottle) for boost. However, the python
support is compiled against the system python, so if you installed a custom one
(say installed via homebrew)
and use it by default, brew will compile the boost from source instead, which
takes an extremely long time.  To prevent this, we need to unlink it first,
and link it back afterwards. That is,


``` bash
brew unlink python
brew link python    # after installation
```

Go to the following folder and create two files,
 
``` bash
cd `brew --prefix source-highlight`/share/source-highlight
```

``` matlab matlab.style
keyword blue;
string #a020f0;
comment darkgreen;
```


``` matlab matlab.lang
keyword = "break|case|catch|classdef|continue|else|elseif|end|for|function|global|if|otherwise|parfor|persistent|return|spmd|switch|try|while"
comment start "%"
trans = '[a-zA-Z0-9_.]\''
string delim "'" "'" escape "''"
```

Finally, edit `lang.map` to create a mapping for matlab file.

``` bash lang.map
echo 'm = matlab.lang' >> lang.map
```]]></content>
  </entry>
  
</feed>
