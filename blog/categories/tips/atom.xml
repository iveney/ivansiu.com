<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tips | Ivan's Blog]]></title>
  <link href="http://blog.ivansiu.com/blog/categories/tips/atom.xml" rel="self"/>
  <link href="http://blog.ivansiu.com/"/>
  <updated>2018-01-20T19:25:51-08:00</updated>
  <id>http://blog.ivansiu.com/</id>
  <author>
    <name><![CDATA[Zigang "Ivan" Xiao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Write Blog Post With Dropbox Paper]]></title>
    <link href="http://blog.ivansiu.com/blog/2018/01/20/write-blog-post-with-dropbox-paper/"/>
    <updated>2018-01-20T19:20:35-08:00</updated>
    <id>http://blog.ivansiu.com/blog/2018/01/20/write-blog-post-with-dropbox-paper</id>
    <content type="html"><![CDATA[My new workflow is using Dropbox Paper so that I can easily write in WYSIWYG style (rich text), and easily export as Markdown. Very convenient.

<!-- more -->


My previous blogpost was written using this method. Steps as below.


## 1. Write your post
![](https://d2mxuefqeaa7sj.cloudfront.net/s_4103A3F76CAE554E4D694B1801AAB4B486D3FE4DF7E362E98E1839B120DBD00E_1516504615365_image.png)

## 2. Export as markdown
![](https://d2mxuefqeaa7sj.cloudfront.net/s_4103A3F76CAE554E4D694B1801AAB4B486D3FE4DF7E362E98E1839B120DBD00E_1516504655450_image.png)

![](https://d2mxuefqeaa7sj.cloudfront.net/s_4103A3F76CAE554E4D694B1801AAB4B486D3FE4DF7E362E98E1839B120DBD00E_1516504671369_image.png)

## 3. Copy paste the downloaded markdown to your blog system

After clicking ‘Download’, a md file will be downloaded. In my case, I use Octopress. You can easily fix up the metadata and preview. What is super-nice is that the image is automatically uploaded to cloud and you can use it as is, unless you want to upload it to your own host. Of course, this is also a disadvantage, you will need to manually upload those photos. I haven’t figured out a way to automate this yet.

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[美國租車陷阱：Toll Charges]]></title>
    <link href="http://blog.ivansiu.com/blog/2017/08/01/zu-che-xian-jing-:toll-charges/"/>
    <updated>2017-08-01T22:14:24-07:00</updated>
    <id>http://blog.ivansiu.com/blog/2017/08/01/zu-che-xian-jing-:toll-charges</id>
    <content type="html"><![CDATA[今天收到了一張大概兩個月前的 bill，說我欠款 \$30 美金……

（如果你看到這篇文章，並且知道最新進展，請務必留言讓我知道。）

<!-- more -->

![](http://res.cloudinary.com/maomao/image/upload/v1501651001/platepass-scam.jpg)

兩個月前，我因爲[車子被 flying debris 刮傷 hood]({% post_url 2017-04-30-making-an-comprehensive-insurance-claim-after-got-hit-by-road-debris-flying-object %})，而拿去了修車店修理。同時保險公司也 cover 我租車的費用。於是，在 Hertz 租了一輛小車。

由於我上班下班都會經過 Dumbarton bridge，所以單程會被收取 \$5 費用。由於我自己有 fastrak，所以都是過橋時拿出來使用。但是有一次過橋忘記了。當時想着，也許跟之前一樣，會寄賬單到家，所以也沒多想。直到今天看到賬單，才大吃一驚：你收取我原價 \$5 的過路費，我認了。但是由於我只是一次沒有交，而收取我整個 rental period 的 service charge，每天 \$4.95，封頂 \$24.75。這多收的服務費，都已經是我的過路費的5倍了。這未免太坑了點？？

仔細想想，這家名爲 PlatePass 的公司，實在是太陰險毒辣了。賬單在我結束租車後近兩個月後才寄出，此時早已經過了保險 claim 完成的日子。這間狠毒的公司，說白了就是躺着就把錢給賺了。

仔細上網搜搜，我不是第一個人。網上早已經有[N多的抱怨](https://www.consumeraffairs.com/travel/platepass-com.html)。不少的[文章](http://www.courant.com/consumer/bottom-line/hc-bottom-line-hertz-platepass-20150514-column.html)也[披露](https://thepointsguy.com/guide/avoid-rental-car-toll-charges/)了這些公司無賴的行徑。可惜的是，我並沒有看到操作性太強的 argue 方法。只能吃一塹，長一智，以後一定要廣而告之，揭發這些無恥商家的醜惡行徑。文章裏面給出的建議是：

1. 遇到 toll bridge/road，不要走快速通道，走現金通道。
2. 自帶 toll transponder
3. 設 gps 時，avoid toll roads。

希望下次大家不要再犯這樣的錯誤了。

----
更新：看到有文章介紹說，三藩市已經有律師在[告類似公司的 shady practice 了](https://consumerist.com/2017/03/02/san-francisco-suing-hertz-for-allegedly-ripping-off-car-renters-on-golden-gate-bridge/)。希望能告贏。其實以前就已經有一個 [class action suit](http://www.hertzplatepasssettlement.com/) ，不過已經是好幾年前的事了。非常震驚他們竟然還在繼續下去。
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X: Reveal File in Console]]></title>
    <link href="http://blog.ivansiu.com/blog/2014/05/01/os-x-reveal-file-in-console/"/>
    <updated>2014-05-01T17:58:20-07:00</updated>
    <id>http://blog.ivansiu.com/blog/2014/05/01/os-x-reveal-file-in-console</id>
    <content type="html"><![CDATA[![](https://res.cloudinary.com/maomao/image/upload/v1491291930/blog/2014-05-01-os-x-reveal-file-in-console.png)

One of the neat things you can do in OS X is to reveal a file in Finder.app from
some other applications. Turns out lots of the time, we also want to do that in
the terminal. The following script helps you with that:

<!-- more -->

``` applescript reveal
#!/usr/bin/osascript
on run args
	set fullpath to do shell script "realpath " & (quoted form of first item of args)
	set theFile to POSIX file fullpath
	tell application "Finder"
		reveal theFile
		activate
	end tell
end
```

Note:

1. You should put this into a directory in your search path. I recommend in
`~/bin`. Also remember to `chmod +x`.
2. The above requires another script `realpath`, which returns the
fullpath of a file. You can find it
[here]({% post_url 2014-05-01-os-x-get-full-path-of-file-using-realpath %}).
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X: Get Full Path of File Using Realpath]]></title>
    <link href="http://blog.ivansiu.com/blog/2014/05/01/os-x-get-full-path-of-file-using-realpath/"/>
    <updated>2014-05-01T16:25:56-07:00</updated>
    <id>http://blog.ivansiu.com/blog/2014/05/01/os-x-get-full-path-of-file-using-realpath</id>
    <content type="html"><![CDATA[``` bash Demonstrate of realpath
➜  /Applications  realpath iBooks.app
/Applications/iBooks.app
➜  /Applications
```

`realpath` is a command line utility that is 
included in most UNIX distributions but not Mac OS X.
Thanks to [Stuart Campbell](https://github.com/harto),
a minimal implementation is provided 
[here](https://github.com/harto/realpath-osx), and my 
[fork](https://github.com/iveney/realpath-osx).

<!-- more -->

If you use `homebrew`, you can tap my 
[repo](https://github.com/iveney/homebrew-mocha), and install it using
homebrew.

``` bash
brew tap iveney/mocha
brew install realpath
```

Viola! Now you can get the full path of file in console. A nice thing
I often use is to chain it with `pbcopy` to copy the full path to 
the OS X clipboard.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Send Ctrl-a in Tmux After Rebinding to It]]></title>
    <link href="http://blog.ivansiu.com/blog/2014/05/01/send-ctrl-a-in-tmux-after-rebinding-to-it/"/>
    <updated>2014-05-01T15:14:46-07:00</updated>
    <id>http://blog.ivansiu.com/blog/2014/05/01/send-ctrl-a-in-tmux-after-rebinding-to-it</id>
    <content type="html"><![CDATA[![](https://res.cloudinary.com/maomao/image/upload/v1491291930/blog/2014-05-01-send-ctrl-a-in-tmux-after-rebinding-to-it.png)

While `tmux` provides much better functionality than `screen`,
most of us that work with tmux have been using `screen` for a long time,
and it is more comfortable for us to use `ctrl-a` than the default `ctrl-b`,
which is finger-strechy. Thus the first thing I will do after installing `tmux`
is to rebind the prefix to `ctrl-a`. That gives us the most handy way of
swapping last two windows by typing `ctrl-a ctrl-a`.

<!-- more -->

However, this comes for a price. That is, in a shell environment that
is integrated with `readline`, `ctrl-a` is used to jump the begining of line.
Now that it is mapped as prefix, we can no longer do that.

Surprisingly, the solution is pretty simple. Just use `ctrl-a a` to
send the prefix itself, and use `ctrl-a ctrl-a` to go to the last window.
Specifically, add these two lines in `~/.tmux.conf`:

``` bash ~/.tmux.conf 
bind a send-prefix
bind-key C-a last-window
```

[via](http://stackoverflow.com/questions/11557076/if-i-set-key-bind-of-c-b-to-c-a-in-tmux-how-can-i-move-the-cursor-to-the-beginni#comment15297769_11561128).
]]></content>
  </entry>
  
</feed>
