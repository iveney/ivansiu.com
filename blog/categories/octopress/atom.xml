<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: octopress | Zigang Xiao]]></title>
  <link href="http://blog.ivansiu.com/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://blog.ivansiu.com/"/>
  <updated>2014-05-28T01:22:40-07:00</updated>
  <id>http://blog.ivansiu.com/</id>
  <author>
    <name><![CDATA[Zigang Xiao (Ivan)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My Octopress Blogging Flow]]></title>
    <link href="http://blog.ivansiu.com/blog/2014/05/22/my-octopress-blogging-flow/"/>
    <updated>2014-05-22T20:38:07-07:00</updated>
    <id>http://blog.ivansiu.com/blog/2014/05/22/my-octopress-blogging-flow</id>
    <content type="html"><![CDATA[![Writing in Sublime Text and previewing in Marked](https://dl.dropboxusercontent.com/u/3315210/blog/octopress-flow/sublime-marked.png)

After blogging with [Octopress] for a while, I have already gained
some insights on it, and my publishing flow has been smoother.
I think it is right time to share my flow as a reference.

<!-- more -->

## The Flow

The following sections outlines the flow. The last section 
contains assorted tips and tricks. For the basic configuration
of Octopress, please refer to the official [website][Octopress].
I also recommend installing [Alfred.app](http://www.alfredapp.com).

### Creating a post: alfred workflow (blog publish)

[Artem Yakimenko](https://github.com/temikus)
created an awesome [alfred workflow] for publishing and generating octopress
websites. Use `blog publish [title]` to create a new post:

![][blog-publish]

It then opens the post in your specified text editor with template.

### Editing: Sublime Text.app + Marked.app + Marked App Menu (ST Plugin)

I use [Sublime Text (ST)][Sublime Text] as my text editor, because it provides
VIM keybinding and there is a huge repository of plugins. While editing, I use
[Marked] to instantly render the markdown file and view the result. In fact, the
title image shows my editing and previewing in action.

To make the process sweeter, there is a ST plugin called `Marked App Menu`
that allows you to open the current file in Marked. Just search in
ST Package Control to install it.

### Previewing: pow + rake watch + pow alfred workflow

To preview the generate website, simply install [pow] and execute 
`rake watch` under octopress directory to monitor the change.
Octopress official website provides [some explanation](http://octopress.org/docs/blogging/). After installation, you can view your website locally at
<http://octopress.dev>.

You should also install the [pow alfred workflow][pow for alfred], which can
help you open pow website in a breeze.

![](https://dl.dropboxusercontent.com/u/3315210/blog/octopress-flow/pow.png)

### Math Rendering: MathJax

Since I am an EECS student, I write a lot of 
[Optimization](/blog/categories/optimization),
[Machine Learning](/blog/categories/machine-learning)
and
[Computer Vision](/blog/categories/computer-vision) stuff, which
relies heavily on mathematics. Thus, writing math formulas is a must for me.
[MathJax](http://mathjax.org) is a javascript library for rendering
math by writing LaTeX math. To do this, one needs to configure 
the site and link to the library. Put these two lines into 
`<octopress>/source/_includes/custom/head.html`:

``` html
<script type="text/javascript"
	src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<script type="text/javascript" src="http://blog.ivansiu.com/javascripts/MathJaxLocal.js"></script>
```

The first script block loads MathJax, and the second loads a custom configuration
in `source/javascripts/MathJaxLocal.js`. It is a good place to write your own
macro there. For instance:

``` javascript
MathJax.Hub.Config({
	TeX: { 
		equationNumbers: { autoNumber: "AMS" },
		TagSide: "left",
		Macros: {
			reals: ['\\mathbb{R}'],
			complex: ['\\mathbb{C}'],
			norm: ['\\left\\lVert#1\\right\\rVert', 1],
			given: ['\\:#1\\vert\\:', 1],
			data: ['\\mathcal{D}'],
		}
	}
});

MathJax.Ajax.loadComplete("/javascripts/MathJaxLocal.js");
```

Now you can write math!

$$e^{i \pi} + 1 = 0$$

There are a couple of good articles for reference:

1. [Blogging With Math: Octopress, MathJax, and Pandoc](http://drz.ac/2013/01/03/blogging-with-math/)
2. [Writing Math Equations on Octopress](http://www.idryman.org/blog/2012/03/10/writing-math-equations-on-octopress/)
3. [LaTeX Math in Octopress](http://blog.zhengdong.me/2012/12/19/latex-math-in-octopress)

### Image hosting: Dropbox public folder

I host my images in Dropbox Public folder, since you can simply copy the public
link and paste it to the post source, for example:

![](https://dl.dropboxusercontent.com/u/3315210/blog/octopress-flow/dropbox-image.png)

### Image editing: Skitch + OmniGraffle

The previous image is done by a timed capture from [skitch](http://skitch.com).
For advanced vector graphics, I use [OmniGraffle](http://www.omnigroup.com/omnigraffle).

### Markdown converter: pandoc

[Pandoc](http://johnmacfarlane.net/pandoc/index.html)
is a swiss-army knife like tool that convert documents in multiple
formats to several dozens of output formats. I mainly use it as the
markdown converter for Octopress. A [plugin](https://github.com/dsanson/jekyll-pandoc-plugin) can help you with that.

After installation, I update the `markdown` section of `_config.yml` 
with the following:

``` yaml
markdown: pandoc
pandoc:
  format: html5
  extensions:
    - smart
    - mathjax
    - bibliography: source/blog.bib
    - csl: _style/ieee.csl
```

which tells Octopress to use pandoc, and pass the option `smart`, `mathjax`
and use the *style file* `ieee.csl` to format the *biliography* `blog.bib`.
For example, `refer to [@xiao2013optimally]` generates *refer to [@xiao2013optimally]* (scroll down to see the [References] section).

### Pandoc's Markdown Reference: Dash.app and Dash alfred workflow

[Dash.app](http://kapeli.com/dash) is an API Documentation Browser and Code Snippet Manager. It provides an convinient alfred workflow that searches
the documents:

![](https://dl.dropboxusercontent.com/u/3315210/blog/octopress-flow/alfred-dash.png)

opens

![](https://dl.dropboxusercontent.com/u/3315210/blog/octopress-flow/Dash.png)

### Tips and tricks

Continuously growing...

- There are lots of undocumented/less documented things in Octopress,
which can help you write blog posts kinda 'programmatically'.
For example, `http://blog.ivansiu.com` returns the url of site, which is 
<http://blog.ivansiu.com> in my case. In fact, anything in `_config.yml` is a variable
under `site`.

## Conclusion

In conclusion, Octopress is a revolutionary blogging framework. It provides a
robust static site building framework (jekyll, bootstrap, scss, etc.) and allows
complete control over the source, which is perfect for  users that have basic
coding and source control skills. In fact, it gives me a similar feeling of
getting touch with a Mac. That is, compared to Windows, which is too close and
does not provide built-in programming-friendly environment (Console, UNIX stuff,
etc.), and compared to Linux, which is very open but too many variations and too
many customizations needed, it combines their advantages by presenting a user-
friendly interface and provides all sorts of underlying UNIX tools. I am very
satisfied about this and my intention to write posts have  revived. However,
some sort of basic configuration is still needed. In particular, I would say
Mathjax rendering and better image support definitely need  to be integrated in
the next release.

*What's your thought? Do you have any neat tricks publishing with [Octopress]?
Please leave your comments.*

## References

[blog-publish]: https://dl.dropboxusercontent.com/u/3315210/blog/octopress-flow/blog-publish.png
[alfred workflow]: http://www.alfredforum.com/topic/2289-octopress-publisher/
[Octopress]: http://octopress.org
[Sublime Text]: http://www.sublimetext.com
[pow]: http://pow.cx
[pow for alfred]: http://tombeynon.github.io/alfred-pow/]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Page Components of Octopress: Using Foxslide as An Example]]></title>
    <link href="http://blog.ivansiu.com/blog/2013/10/17/understanding-page-components-of-octopress-using-foxslide-as-an-example/"/>
    <updated>2013-10-17T16:12:00-07:00</updated>
    <id>http://blog.ivansiu.com/blog/2013/10/17/understanding-page-components-of-octopress-using-foxslide-as-an-example</id>
    <content type="html"><![CDATA[![](https://lh6.googleusercontent.com/-Gq3oxMml8sU/UmBScRSUxhI/AAAAAAAA6SE/0MuhSb9sdWM/s800/foxslide.jpg)]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updating Octopress Theme]]></title>
    <link href="http://blog.ivansiu.com/blog/2013/10/17/updating-octopress-theme/"/>
    <updated>2013-10-17T14:54:00-07:00</updated>
    <id>http://blog.ivansiu.com/blog/2013/10/17/updating-octopress-theme</id>
    <content type="html"><![CDATA[The themes are stored in `.themes/<name>`, we can use the rake command to update either the source or style, as documented in the [office website](http://octopress.org/docs/updating/). However, the syntax should be more clear, i.e.,

```
rake update_source['theme name']
```

Without the brackets, it defaults to `.themes/classic`.

Caveats:

- Do NOT use `rake install` to install the theme again, since it will overwrite the whole thing, including the files in `source/_include/custom` directory.
- When working on the blog, anything outside of `source/_include/custom` should be considered the theme. Thus, do not make changes directly in `source`. Make changes to theme and update the theme to reflect the changes to the blog.
]]></content>
  </entry>
  
</feed>
