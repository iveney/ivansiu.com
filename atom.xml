<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Zigang Xiao]]></title>
  <link href="http://blog.ivansiu.com/atom.xml" rel="self"/>
  <link href="http://blog.ivansiu.com/"/>
  <updated>2014-05-28T01:00:21-07:00</updated>
  <id>http://blog.ivansiu.com/</id>
  <author>
    <name><![CDATA[Zigang Xiao (Ivan)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fix Mid 2009 MBP RAM not recognized issue]]></title>
    <link href="http://blog.ivansiu.com/blog/2014/05/28/fix-mid-2009-mbp-ram-not-recognized-issue/"/>
    <updated>2014-05-28T23:30:56-07:00</updated>
    <id>http://blog.ivansiu.com/blog/2014/05/28/fix-mid-2009-mbp-ram-not-recognized-issue</id>
    <content type="html"><![CDATA[<figure>
<img src="https://dl.dropboxusercontent.com/u/3315210/blog/fix-mbp/mbp09-ram-theory.png" alt="Possible cause of unrecoganized RAM" /><figcaption>Possible cause of unrecoganized RAM</figcaption>
</figure>
<p>A few days ago, I encountered an issue which seems to be common among mid-2009 MBPs: one of the RAM (in slot 1) is not recognized anymore. Or, sometimes it is recognized, but after sleep and wake up, the computer freezes and impossible to recover but force power off.</p>
<!-- more -->

<p>It turns out this is a common issue in this model. See the discussion in this <a href="https://discussions.apple.com/message/25788934?ac_cid=tw123456#25788934">thread</a> and this <a href="https://discussions.apple.com/thread/4263981?start=30&amp;tstart=0">thread</a>.</p>
<p>As I suggested in <a href="https://discussions.apple.com/message/24868689#24868689">my reply</a>, this may due to a RAM slot degradation. My guess is, the RAM slot cannot align the RAM to a correct contact positions any more. Precisely, see the post image above. Notice that the two clips on the left and right are used to hold the rams in a horizontal position, otherwise they will bend upwards. I took a close look at those clips and found that the plastic wore out and cannot hold them as original. I don’t have great ways to fix them, so I just cropped some papers and insert them between the RAMs and the back edges on the body, hoping they can help tucking the RAMs.</p>
<p>As I am fixing it, I accidentally broke the left holder. So I have to customized a plastic holder and stuck it with the logic board to hold the inner ram (slot 1).</p>
<figure>
<img src="https://dl.dropboxusercontent.com/u/3315210/blog/fix-mbp/cracked-holder.jpg" />
</figure>
<p>To verify my theory, I then taped a padding at the corresponding RAM position in the back cover:</p>
<figure>
<img src="https://dl.dropboxusercontent.com/u/3315210/blog/fix-mbp/padding.jpg" />
</figure>
<p>And they look like the following before I close:</p>
<figure>
<img src="https://dl.dropboxusercontent.com/u/3315210/blog/fix-mbp/padding-ram.jpg" />
</figure>
<p>Note that you have to screw it real tight to create the pressure such that the RAM is aligned. That said, there will be a ‘bump’ at that position, and will easily cause scratch. So I use an apple sticker to cover my ass:</p>
<figure>
<img src="https://dl.dropboxusercontent.com/u/3315210/blog/fix-mbp/sticker.jpg" />
</figure>
<p>This method worked for me, well, at 99% of the time. Sometimes after sleep, the MBP still won’t wake up. I notice that this usually due to running the MBP for a long time, and it’s hot inside. Nevertheless, this is the best solution I can come up with by now. <em>If you have any other cheap solution that does not require replacing the logic board, please let me know in the comments.</em></p>
<p>Finally, Zach Clawson created a <a href="https://people.cam.cornell.edu/~zc227/extras/mid2009mbp_RAM.html">dedicated page</a> for this issue, which lists lots of reference and provides explanation to it. Make sure you check it out if you have encountered similar issue.</p>
<hr />
<p>There are other common issues for this model, and they can be easily fixed. See my following posts:</p>
<ul>
<li><a href="http://blog.ivansiu.com/blog/2013/11/08/saving-80-dollars-by-fixing-magsafe-by-yourself/">Fix frayed Magsafe cable</a></li>
<li><a href="http://blog.ivansiu.com/blog/2014/05/28/replacing-sata-cable-in-mid-2009-mbp/">Replace faulty SATA cable</a></li>
</ul>
<p><em>If you have similar experience, do not hesitate to let me know. If you find my instruction helpful, leave a comment and share it!</em></p>
<div class="references">

</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replacing SATA cable in Mid 2009 MBP]]></title>
    <link href="http://blog.ivansiu.com/blog/2014/05/28/replacing-sata-cable-in-mid-2009-mbp/"/>
    <updated>2014-05-28T00:15:08-07:00</updated>
    <id>http://blog.ivansiu.com/blog/2014/05/28/replacing-sata-cable-in-mid-2009-mbp</id>
    <content type="html"><![CDATA[<figure>
<img src="https://dl.dropboxusercontent.com/u/3315210/blog/fix-mbp/sata-cable.jpg" alt="Replacing MBP cable" /><figcaption>Replacing MBP cable</figcaption>
</figure>
<p>Recently, my mid 2009 MBP (Model A1278) fails to recognize the hard drive. My first bet was another disk failure on me, but it was not the case. I took down the hard drive and put it to a mobile hard drive case and it can be read smoothly.</p>
<!-- more -->

<p>It turns out that it is due to the SATA cable fault, which is a notorious problem for mid 2009 MBP model. See the threads and discussions <a href="http://forums.macrumors.com/showthread.php?t=1031577">here</a>, <a href="http://www.ifixit.com/Answers/View/36360/Internal+hard+drive+disk+not+recognized">here</a>, <a href="http://www.ifixit.com/Answers/View/43072/Hard+Drive+not+recognized+by+system+during+boot+or+install">here</a> and <a href="https://discussions.apple.com/message/25454809#25454809">here</a>.</p>
<p>Luckily, the solution is simple, just go ahead and purchase a <a href="http://www.ifixit.com/MacBook-Parts/MacBook-Pro-13-Inch-Unibody-Hard-Drive-Cable/IF163-013#productDescription">replacement cable</a> and replace it. iFixit has a very detailed <a href="http://www.ifixit.com/Guide/MacBook+Pro+13-Inch+Unibody+Mid+2009+Hard+Drive+Cable+Replacement/1340">illustrated document</a> on the procedures. However, Amazon has a <a href="cable%20amazon">cheaper option</a>, and it works fine for me. I didn’t test the infra-red though, since I never and not plan to use it.</p>
<p>There are other common issues for this model, and they can be easily fixed. See my following posts:</p>
<ul>
<li><a href="http://blog.ivansiu.com/blog/2013/11/08/saving-80-dollars-by-fixing-magsafe-by-yourself/">Fix frayed Magsafe cable</a></li>
<li><a href="http://blog.ivansiu.com/blog/2014/05/28/fix-mid-2009-mbp-ram-not-recognized-issue/">Fix unrecognized RAM</a></li>
</ul>
<p><em>If you have similar experience, do not hesitate to let me know. If you find my instruction helpful, leave a comment and share it!</em></p>
<div class="references">

</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Octopress Blogging Flow]]></title>
    <link href="http://blog.ivansiu.com/blog/2014/05/22/my-octopress-blogging-flow/"/>
    <updated>2014-05-22T20:38:07-07:00</updated>
    <id>http://blog.ivansiu.com/blog/2014/05/22/my-octopress-blogging-flow</id>
    <content type="html"><![CDATA[<figure>
<img src="https://dl.dropboxusercontent.com/u/3315210/blog/octopress-flow/sublime-marked.png" alt="Writing in Sublime Text and previewing in Marked" /><figcaption>Writing in Sublime Text and previewing in Marked</figcaption>
</figure>
<p>After blogging with <a href="http://octopress.org">Octopress</a> for a while, I have already gained some insights on it, and my publishing flow has been smoother. I think it is right time to share my flow as a reference.</p>
<!-- more -->

<h2 id="the-flow">The Flow</h2>
<p>The following sections outlines the flow. The last section contains assorted tips and tricks. For the basic configuration of Octopress, please refer to the official <a href="http://octopress.org">website</a>. I also recommend installing <a href="http://www.alfredapp.com">Alfred.app</a>.</p>
<h3 id="creating-a-post-alfred-workflow-blog-publish">Creating a post: alfred workflow (blog publish)</h3>
<p><a href="https://github.com/temikus">Artem Yakimenko</a> created an awesome <a href="http://www.alfredforum.com/topic/2289-octopress-publisher/">alfred workflow</a> for publishing and generating octopress websites. Use <code>blog publish [title]</code> to create a new post:</p>
<figure>
<img src="https://dl.dropboxusercontent.com/u/3315210/blog/octopress-flow/blog-publish.png" />
</figure>
<p>It then opens the post in your specified text editor with template.</p>
<h3 id="editing-sublime-text.app-marked.app-marked-app-menu-st-plugin">Editing: Sublime Text.app + Marked.app + Marked App Menu (ST Plugin)</h3>
<p>I use <a href="http://www.sublimetext.com">Sublime Text (ST)</a> as my text editor, because it provides VIM keybinding and there is a huge repository of plugins. While editing, I use [Marked] to instantly render the markdown file and view the result. In fact, the title image shows my editing and previewing in action.</p>
<p>To make the process sweeter, there is a ST plugin called <code>Marked App Menu</code> that allows you to open the current file in Marked. Just search in ST Package Control to install it.</p>
<h3 id="previewing-pow-rake-watch-pow-alfred-workflow">Previewing: pow + rake watch + pow alfred workflow</h3>
<p>To preview the generate website, simply install <a href="http://pow.cx">pow</a> and execute <code>rake watch</code> under octopress directory to monitor the change. Octopress official website provides <a href="http://octopress.org/docs/blogging/">some explanation</a>. After installation, you can view your website locally at <a href="http://octopress.dev">http://octopress.dev</a>.</p>
<p>You should also install the <a href="http://tombeynon.github.io/alfred-pow/">pow alfred workflow</a>, which can help you open pow website in a breeze.</p>
<figure>
<img src="https://dl.dropboxusercontent.com/u/3315210/blog/octopress-flow/pow.png" />
</figure>
<h3 id="math-rendering-mathjax">Math Rendering: MathJax</h3>
<p>Since I am an EECS student, I write a lot of <a href="http://blog.ivansiu.com/blog/categories/optimization">Optimization</a>, <a href="http://blog.ivansiu.com/blog/categories/machine-learning">Machine Learning</a> and <a href="http://blog.ivansiu.com/blog/categories/computer-vision">Computer Vision</a> stuff, which relies heavily on mathematics. Thus, writing math formulas is a must for me. <a href="http://mathjax.org">MathJax</a> is a javascript library for rendering math by writing LaTeX math. To do this, one needs to configure the site and link to the library. Put these two lines into <code>&lt;octopress&gt;/source/_includes/custom/head.html</code>:</p>
<div class="bogus-wrapper">
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span>
</span><span class='line'>  <span class="na">src=</span><span class="s">&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;/javascripts/MathJaxLocal.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table>
</div>
</figure>
</notextile>
</div>
<p>The first script block loads MathJax, and the second loads a custom configuration in <code>source/javascripts/MathJaxLocal.js</code>. It is a good place to write your own macro there. For instance:</p>
<div class="bogus-wrapper">
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">MathJax</span><span class="p">.</span><span class="nx">Hub</span><span class="p">.</span><span class="nx">Config</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">TeX</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">equationNumbers</span><span class="o">:</span> <span class="p">{</span> <span class="nx">autoNumber</span><span class="o">:</span> <span class="s2">&quot;AMS&quot;</span> <span class="p">},</span>
</span><span class='line'>      <span class="nx">TagSide</span><span class="o">:</span> <span class="s2">&quot;left&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Macros</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">reals</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;\\mathbb{R}&#39;</span><span class="p">],</span>
</span><span class='line'>          <span class="nx">complex</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;\\mathbb{C}&#39;</span><span class="p">],</span>
</span><span class='line'>          <span class="nx">norm</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;\\left\\lVert#1\\right\\rVert&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
</span><span class='line'>          <span class="nx">given</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;\\:#1\\vert\\:&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
</span><span class='line'>          <span class="nx">data</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;\\mathcal{D}&#39;</span><span class="p">],</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">MathJax</span><span class="p">.</span><span class="nx">Ajax</span><span class="p">.</span><span class="nx">loadComplete</span><span class="p">(</span><span class="s2">&quot;/javascripts/MathJaxLocal.js&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table>
</div>
</figure>
</notextile>
</div>
<p>Now you can write math!</p>
<p><span class="math">\[e^{i \pi} + 1 = 0\]</span></p>
<p>There are a couple of good articles for reference:</p>
<ol type="1">
<li><a href="http://drz.ac/2013/01/03/blogging-with-math/">Blogging With Math: Octopress, MathJax, and Pandoc</a></li>
<li><a href="http://www.idryman.org/blog/2012/03/10/writing-math-equations-on-octopress/">Writing Math Equations on Octopress</a></li>
<li><a href="http://blog.zhengdong.me/2012/12/19/latex-math-in-octopress">LaTeX Math in Octopress</a></li>
</ol>
<h3 id="image-hosting-dropbox-public-folder">Image hosting: Dropbox public folder</h3>
<p>I host my images in Dropbox Public folder, since you can simply copy the public link and paste it to the post source, for example:</p>
<figure>
<img src="https://dl.dropboxusercontent.com/u/3315210/blog/octopress-flow/dropbox-image.png" />
</figure>
<h3 id="image-editing-skitch-omnigraffle">Image editing: Skitch + OmniGraffle</h3>
<p>The previous image is done by a timed capture from <a href="http://skitch.com">skitch</a>. For advanced vector graphics, I use <a href="http://www.omnigroup.com/omnigraffle">OmniGraffle</a>.</p>
<h3 id="markdown-converter-pandoc">Markdown converter: pandoc</h3>
<p><a href="http://johnmacfarlane.net/pandoc/index.html">Pandoc</a> is a swiss-army knife like tool that convert documents in multiple formats to several dozens of output formats. I mainly use it as the markdown converter for Octopress. A <a href="https://github.com/dsanson/jekyll-pandoc-plugin">plugin</a> can help you with that.</p>
<p>After installation, I update the <code>markdown</code> section of <code>_config.yml</code> with the following:</p>
<div class="bogus-wrapper">
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">markdown</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">pandoc</span>
</span><span class='line'><span class="l-Scalar-Plain">pandoc</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">format</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">html5</span>
</span><span class='line'>  <span class="l-Scalar-Plain">extensions</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">smart</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mathjax</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">bibliography</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">source/blog.bib</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">csl</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">_style/ieee.csl</span>
</span></code></pre></td></tr></table>
</div>
</figure>
</notextile>
</div>
<p>which tells Octopress to use pandoc, and pass the option <code>smart</code>, <code>mathjax</code> and use the <em>style file</em> <code>ieee.csl</code> to format the <em>biliography</em> <code>blog.bib</code>. For example, <code>refer to [@xiao2013optimally]</code> generates <em>refer to <span class="citation" data-cites="xiao2013optimally">[1]</span></em> (scroll down to see the <a href="#references">References</a> section).</p>
<h3 id="pandocs-markdown-reference-dash.app-and-dash-alfred-workflow">Pandoc’s Markdown Reference: Dash.app and Dash alfred workflow</h3>
<p><a href="http://kapeli.com/dash">Dash.app</a> is an API Documentation Browser and Code Snippet Manager. It provides an convinient alfred workflow that searches the documents:</p>
<figure>
<img src="https://dl.dropboxusercontent.com/u/3315210/blog/octopress-flow/alfred-dash.png" />
</figure>
<p>opens</p>
<figure>
<img src="https://dl.dropboxusercontent.com/u/3315210/blog/octopress-flow/Dash.png" />
</figure>
<h3 id="tips-and-tricks">Tips and tricks</h3>
<p>Continuously growing…</p>
<ul>
<li>There are lots of undocumented/less documented things in Octopress, which can help you write blog posts kinda ‘programmatically’. For example, <code>http://blog.ivansiu.com</code> returns the url of site, which is <a href="http://blog.ivansiu.com">http://blog.ivansiu.com</a> in my case. In fact, anything in <code>_config.yml</code> is a variable under <code>site</code>.</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>In conclusion, Octopress is a revolutionary blogging framework. It provides a robust static site building framework (jekyll, bootstrap, scss, etc.) and allows complete control over the source, which is perfect for users that have basic coding and source control skills. In fact, it gives me a similar feeling of getting touch with a Mac. That is, compared to Windows, which is too close and does not provide built-in programming-friendly environment (Console, UNIX stuff, etc.), and compared to Linux, which is very open but too many variations and too many customizations needed, it combines their advantages by presenting a user- friendly interface and provides all sorts of underlying UNIX tools. I am very satisfied about this and my intention to write posts have revived. However, some sort of basic configuration is still needed. In particular, I would say Mathjax rendering and better image support definitely need to be integrated in the next release.</p>
<p><em>What’s your thought? Do you have any neat tricks publishing with <a href="http://octopress.org">Octopress</a>? Please leave your comments.</em></p>
<div class="references">
<h2>References</h2>
<p>[1] Z. Xiao, Y. Du, H. Tian, and M. D. Wong, “Optimally minimizing overlay violation in self-aligned double patterning decomposition for row-based standard cell layout in polynomial time,” in <em>Computer-aided design (iCCAD), 2013 iEEE/aCM international conference on</em>, 2013, pp. 32–39.</p>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sparse Gradient Image Reconstruction via L1-minimization]]></title>
    <link href="http://blog.ivansiu.com/blog/2014/05/19/sparse-image-reconstruction-via-l1-minimization/"/>
    <updated>2014-05-19T13:12:36-07:00</updated>
    <id>http://blog.ivansiu.com/blog/2014/05/19/sparse-image-reconstruction-via-l1-minimization</id>
    <content type="html"><![CDATA[<table>
<tbody>
<tr class="odd">
<td style="text-align: center;"><img src="https://dl.dropboxusercontent.com/u/3315210/blog/l1/phantom_orig.png" alt="phantom_orig" /></td>
<td style="text-align: center;"><img src="https://dl.dropboxusercontent.com/u/3315210/blog/l1/phantom_backproj.png" alt="phantom_backproj" /></td>
<td style="text-align: center;"><img src="https://dl.dropboxusercontent.com/u/3315210/blog/l1/phantom_tv.png" alt="phantom_tv" /></td>
</tr>
<tr class="even">
<td style="text-align: center;">Original</td>
<td style="text-align: center;">Minimum Energy Reconstruction</td>
<td style="text-align: center;">Sparse Reconstruction</td>
</tr>
</tbody>
</table>
<h2 id="introduction">Introduction</h2>
<p>This is a follow up of the L1-minimization series. The previous two posts are:</p>
<ol type="1">
<li><a href="http://blog.ivansiu.com/blog/2014/05/14/a-comparison-of-least-square-l2-regularization-and-l1-regularization/">A Comparison of Least Square, L2-regularization and L1-regularization</a></li>
<li><a href="http://blog.ivansiu.com/blog/2014/05/18/sparse-signal-reconstruction-via-l1-minimization/">Sparse Signal Reconstruction via L1-minimization</a> <!-- more --></li>
</ol>
<p>We have explored using L1-minimization technique to <a href="http://blog.ivansiu.com/blog/2014/05/18/sparse-signal-reconstruction-via-l1-minimization/">recover a sparse signal</a>. The example shows a 1D example. This post demonsrates on a 2D example, where the image is viewed as a signal. This makes sense as we can perform 2D Fourier Transform in the image, where the basis are a combination of <em>horizontal</em> and <em>vertical</em> waves. For a complete introduction to FFT on images, refer to <a href="http://www.cs.unm.edu/~brayer/vision/fourier.html">this tutorial</a>. Notice that similar to 1D signal, we do not measure the image directly in time domain, but we do it in the frequency domain. Concretely, say <span class="math">\(x\)</span> is the 2D image collapsed to 1D, and <span class="math">\(A \in \reals^{k\times n}\)</span> is the measurement matrix, <span class="math">\(b\)</span> is the observation, we then have <span class="math">\(Ax=b\)</span>. Usually we will require <span class="math">\(k = n\)</span> to obtain an exact solution for <span class="math">\(x\)</span> given <span class="math">\(A\)</span> and <span class="math">\(b\)</span>. Now, if we use FFT and obtain the frequency coefficients as <span class="math">\(\hat{x}\)</span>, we can also perform similar measurements <span class="math">\(\hat{A} \hat{x} = \hat{b}\)</span>, and the requirement <span class="math">\(k = n\)</span> is the same. In other words, the required samples (the information) is <em>the same</em>. By using the inverse fourier transform, we can convert <span class="math">\(\hat{x}\)</span> back to <span class="math">\(x\)</span>. The only difference is that the measurement <span class="math">\(\hat{A}\)</span> is taken in frequency (Fourier) domain. As we can see later, we can utilize sparse information to reduce <span class="math">\(k\)</span>.</p>
<h2 id="image-gradients-and-total-variation">Image Gradients and Total Variation</h2>
<p>We first introduct the concept of image gradients. For any 2D real image <code>I</code>, if we think about each row as a signal, we can then view the ‘difference’ between adjacent pixels as (horizontal) gradient <code>Gx(I)</code>, this makes sense since a sharpe change denotes an edge. Similary, we can define the vertical gradient <code>Gy(I)</code> for columns. Thus, we have</p>
<p><span class="math">\[Gx(I) = \begin{cases}
I_{i+1, j} - I_{ij} &amp; i &lt; n &#92;&#92; 0 &amp; i = n
\end{cases}
\qquad
Gy(I) = \begin{cases}
I_{i, j+1} - I_{ij} &amp; j &lt; n &#92;&#92; 0 &amp; j = n
\end{cases}\]</span></p>
<p>where the image size is <span class="math">\(n\times n\)</span>.</p>
<p>Collectively, the image gradient <code>G(I)</code> is defined as the magnitude (2-norm) of both components:</p>
<p><span class="math">\[G(I)_{ij} = \sqrt{(Gx(I)_{ij})^2 + (Gy(I)_{ij})^2}\]</span></p>
<p>The following shows <code>Gx</code>, <code>Gy</code> and <code>G</code> of the phantom image:</p>
<table>
<tbody>
<tr class="odd">
<td style="text-align: center;"><img src="https://dl.dropboxusercontent.com/u/3315210/blog/l1/phantom_gx.png" alt="phantom_gx" /></td>
<td style="text-align: center;"><img src="https://dl.dropboxusercontent.com/u/3315210/blog/l1/phantom_gy.png" alt="phantom_gy" /></td>
<td style="text-align: center;"><img src="https://dl.dropboxusercontent.com/u/3315210/blog/l1/phantom_gI.png" alt="phantom_gI" /></td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>Gx(I)</code></td>
<td style="text-align: center;"><code>Gy(I)</code></td>
<td style="text-align: center;"><code>G(I)</code></td>
</tr>
</tbody>
</table>
<p>The <em>total variation</em> <code>TV(I)</code> of an image is just the sum of this discrete gradient at every point.</p>
<p><span class="math">\[TV(I)= \norm{G(I)}_1 = \sum_{i,j} G(I)_{ij}\]</span></p>
<p>We notice that <span class="math">\(TV(I)\)</span> is just the <em>L1-norm</em> of <span class="math">\(G(I)\)</span>, which leads us to the following: if we have an image that is sparse in its image gradients, we can exploit that and use our L1-minimization trick.</p>
<h2 id="sparse-gradient-image-reconstruction">Sparse Gradient Image Reconstruction</h2>
<p>The ratio of non-zero elements in <code>Gx</code>, <code>Gy</code> and <code>G</code> of the phantom image is <code>0.0711</code>, <code>0.0634</code> and <code>0.0769</code>, respectively. These ratios are really small - and we consider the gradient as <em>sparse</em>.</p>
<p>Let <span class="math">\(F: \reals^{n\times n} -to \complex^{n\times n}\)</span> be the FFT operator, and <span class="math">\(F I\)</span> be the Fourier transform taken on image I. Define a set <span class="math">\(\Omega\)</span> as the <span class="math">\(k\)</span> two-dimensional frequencies chosen according to some sampling pattern from the <span class="math">\(n \times n\)</span>. We further define <span class="math">\(F_\Omega I: \reals^{n \times n} \to \complex^k\)</span> as the <span class="math">\(k\)</span> observation taken from the fourier transform of image I. We can then solve the following optimization problem to recover <span class="math">\(I\)</span>:</p>
<p><span class="math">\[\min_I \norm{F_\Omega I - b}^2_2\]</span></p>
<p>where <span class="math">\(F_\Omega\)</span> can be view as the measurement matrix, <span class="math">\(b\)</span> is the observation, and we want to find <span class="math">\(I\)</span> such that the <em>reconstruction cost</em> (energy) is minimized.</p>
<p>However, the above does not quite work. As we can see in the following images, the <em>L2-minimization</em> does a poor job, either for a random measurement or a radial measurement <span class="citation" data-cites="candes2006robust">[4]</span> in Fourier domain.</p>
<table>
<tbody>
<tr class="odd">
<td style="text-align: center;"><img src="https://dl.dropboxusercontent.com/u/3315210/blog/l1/measurement_random.png" alt="M rand" /></td>
<td style="text-align: center;"><img src="https://dl.dropboxusercontent.com/u/3315210/blog/l1/phantom_rand_bp.png" alt="phantom rand bp" /></td>
<td style="text-align: center;"><img src="https://dl.dropboxusercontent.com/u/3315210/blog/l1/phantom_rand_tv.png" alt="phantom rand tv" /></td>
</tr>
<tr class="even">
<td style="text-align: center;">Random measurement</td>
<td style="text-align: center;">L2-minimization</td>
<td style="text-align: center;">L1-minimization</td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr class="odd">
<td style="text-align: center;"><img src="https://dl.dropboxusercontent.com/u/3315210/blog/l1/measurement_radial.png" alt="M radial" /></td>
<td style="text-align: center;"><img src="https://dl.dropboxusercontent.com/u/3315210/blog/l1/phantom_backproj.png" alt="phantom_backproj" /></td>
<td style="text-align: center;"><img src="https://dl.dropboxusercontent.com/u/3315210/blog/l1/phantom_tv.png" alt="phantom_tv" /></td>
</tr>
<tr class="even">
<td style="text-align: center;">Radial measurement</td>
<td style="text-align: center;">L2-minimization</td>
<td style="text-align: center;">L1-minimization</td>
</tr>
</tbody>
</table>
<p>To utilize the sparse information, we add a L1-regularization term to the above objective function, which yields the following:</p>
<p><span class="math">\[(TV_1) \quad \min_I \norm{F_\Omega I - b}^2_2 + \lambda TV(I)\]</span></p>
<p>Without surprise, optimizing the above gives us a <em>perfect</em> reconstruction of the original image. It is shown that if there exists a piecewise constant I with sufficiently few edges (i.e., <span class="math">\(G(I)_{ij}\)</span> is nonzero for only a small number of indices i, j), then <span class="math">\((TV_1)\)</span> will recover I exactly.</p>
<p>A heavily commented code example is available in my <a href="https://github.com/iveney/l1min/blob/master/image_recovery_l1.m">github repository</a>. Leave a comment if you have any question.</p>
<h2 id="probing-further">Probing Further</h2>
<p>Now, take a look at another example <code>cameraman</code>, which has the following gradients (intensity rescaled using matlab’s <code>imagesc</code>.</p>
<table>
<tbody>
<tr class="odd">
<td style="text-align: center;"><img src="https://dl.dropboxusercontent.com/u/3315210/blog/l1/cameraman.png" alt="cameraman" /></td>
<td style="text-align: center;"><img src="https://dl.dropboxusercontent.com/u/3315210/blog/l1/cameraman_grad.png" alt="cameraman_grad" /></td>
</tr>
<tr class="even">
<td style="text-align: center;">Cameraman</td>
<td style="text-align: center;">Gradient</td>
</tr>
</tbody>
</table>
<p>The following shows the reconstructions (left two are using random measurements, right two are using radial measurements).</p>
<table>
<tbody>
<tr class="odd">
<td style="text-align: center;"><img src="https://dl.dropboxusercontent.com/u/3315210/blog/l1/cameraman_rand_bp.png" alt="cameraman_rand_bp" /></td>
<td style="text-align: center;"><img src="https://dl.dropboxusercontent.com/u/3315210/blog/l1/cameraman_rand_tv.png" alt="cameraman_rand_tv" /></td>
<td style="text-align: center;"><img src="https://dl.dropboxusercontent.com/u/3315210/blog/l1/cameraman_bp.png" alt="cameraman_bp" /></td>
<td style="text-align: center;"><img src="https://dl.dropboxusercontent.com/u/3315210/blog/l1/cameraman_tv.png" alt="cameraman_tv" /></td>
</tr>
<tr class="even">
<td style="text-align: center;">Rand (L2)</td>
<td style="text-align: center;">Rand (L1)</td>
<td style="text-align: center;">Radial (L2)</td>
<td style="text-align: center;">Radial (L1)</td>
</tr>
</tbody>
</table>
<p>As we can see, the results are not as good. In fact, the non-zero ratio of its gradient is 0.9928, which is not sparse at all. However, if we plot the histogram of gradients, we will find that most of the gradient magnitudes are small:</p>
<figure>
<img src="https://dl.dropboxusercontent.com/u/3315210/blog/l1/camera_mag_hist.png" alt="Gradient Histogram" /><figcaption>Gradient Histogram</figcaption>
</figure>
<p>In particular, most of them are smaller than 200, which means the number of ‘changes’ that are larger than 200 is small. In fact, the ratio of gradient &gt; 200 is only <em>0.0964</em>! Thus, there are two possible ways to discard these information and get a ‘compressed’ image that is sparse in gradients:</p>
<ol type="1">
<li>Use mean-shift algorithm to segment the regions such that they have the same color intensities. K-means or quantization should achieve a similar result, though might not as good as mean-shift.</li>
<li>Use image filtering to smooth the image, which can effectively average colors and discard high frequency information.</li>
</ol>
<p><em>I’ll leave these conjectures for furture implementation. For those intereted, please try them yourself and let me know your results. If you have any thoughts, do not hesitate to leave a comment.</em></p>
<h2 id="references">References</h2>
<p>For interested readers, the following references will be helpful.</p>
<div class="references">
<p>[1] E. Candes and J. Romberg, “l1-magic: Recovery of sparse signals via convex programming,” vol. 4, 2005.</p>
<p>[2] J. S. Hesthaven, K. Chowdhary, E. Walsh, and others, “Sparse gradient image reconstruction from incomplete fourier measurements and prior edge information,” <em>IEEE TRANSACTIONS ON IMAGE PROCESSING</em>, 2012.</p>
<p>[3] J. K. Pant, W.-S. Lu, and A. Antoniou, “A new algorithm for compressive sensing based on total-variation norm,” in <em>Circuits and systems (iSCAS), 2013 iEEE international symposium on</em>, 2013, pp. 1352–1355.</p>
<p>[4] E. J. Cand<span>è</span>s, J. Romberg, and T. Tao, “Robust uncertainty principles: Exact signal reconstruction from highly incomplete frequency information,” <em>Information Theory, IEEE Transactions on</em>, vol. 52, no. 2, pp. 489–509, 2006.</p>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sparse Signal Reconstruction via L1-minimization]]></title>
    <link href="http://blog.ivansiu.com/blog/2014/05/18/sparse-signal-reconstruction-via-l1-minimization/"/>
    <updated>2014-05-18T20:13:08-07:00</updated>
    <id>http://blog.ivansiu.com/blog/2014/05/18/sparse-signal-reconstruction-via-l1-minimization</id>
    <content type="html"><![CDATA[<p><a href="https://dl.dropboxusercontent.com/u/3315210/blog/l1/sparse_signal_reconstruction.png"><img src="https://dl.dropboxusercontent.com/u/3315210/blog/l1/sparse_signal_reconstruction.png" alt="Sparse Signal Reconstruction Results" /></a></p>
<p>This is a follow-up of the <a href="http://blog.ivansiu.com/blog/2014/05/14/a-comparison-of-least-square-l2-regularization-and-l1-regularization/">previous post</a> on applications of L1 minimization.</p>
<!-- more -->

<p>As we know, any signal can be decomposed into a linear combination of basis, and the most famous one is <a href="http://en.wikipedia.org/wiki/Fourier_transform">Fourier Transform</a>. For simplicity, let’s assume that we have a signal that is a superposition of some sinusoids. For example, the following:</p>
<div class="bogus-wrapper">
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='matlab'><span class='line'><span class="p">.</span>5<span class="o">*</span><span class="nb">sin</span><span class="p">(</span>3<span class="o">*</span><span class="n">x</span><span class="p">)</span><span class="o">.*</span><span class="nb">cos</span><span class="p">(.</span>1<span class="o">*</span><span class="n">x</span><span class="p">)</span><span class="o">+</span><span class="nb">sin</span><span class="p">(</span>1<span class="p">.</span>3<span class="o">*</span><span class="n">x</span><span class="p">)</span><span class="o">.*</span><span class="nb">sin</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">-</span><span class="p">.</span>7<span class="o">*</span><span class="nb">sin</span><span class="p">(.</span>5<span class="o">*</span><span class="n">x</span><span class="p">)</span><span class="o">.*</span><span class="nb">cos</span><span class="p">(</span>2<span class="p">.</span>3<span class="o">*</span><span class="n">x</span><span class="p">)</span><span class="o">.*</span><span class="nb">cos</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span></code></pre></td></tr></table>
</div>
</figure>
</notextile>
</div>
<p>With <em>discrete consine transform</em> (DCT), we can easily find the coefficients of corresponding sinusoid components. The above example’s coefficients (in frequency domain) and signal in time domain are shown in the post figure.</p>
<p>Now, let’s assume we do not know the signal and want to reconstruct it by sampling. Theorectically, the number of samples required is at least two times the signal frequency, according to the famous <a href="http://en.wikipedia.org/wiki/Nyquist–Shannon_sampling_theorem">Nyquist–Shannon sampling theorem</a>.</p>
<p>However, this assume zero-knowledge about the signal. If we know some structure of the signal, e.g., the DCT coefficients are sparse in our case, we can further reduce the number of samples required.<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a></p>
<p>The following code snippet demonstrates how this works. We generate the original signal in time domain and then perform a DCT to obtain the coefficients.</p>
<div class="bogus-wrapper">
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='matlab'><span class='line'><span class="c">% sparse signal recovery using L1</span>
</span><span class='line'>
</span><span class='line'><span class="n">rng</span><span class="p">(</span>0<span class="p">);</span>
</span><span class='line'><span class="n">N</span> <span class="p">=</span> 256<span class="p">;</span> <span class="n">R</span> <span class="p">=</span> 3<span class="p">;</span> <span class="n">C</span> <span class="p">=</span> 2<span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c">% some superposition of sinoisoids, feel free to change and experiment</span>
</span><span class='line'><span class="n">f</span> <span class="p">=</span> <span class="p">@(</span><span class="n">x</span><span class="p">)</span> <span class="p">.</span>5<span class="o">*</span><span class="nb">sin</span><span class="p">(</span>3<span class="o">*</span><span class="n">x</span><span class="p">)</span><span class="o">.*</span><span class="nb">cos</span><span class="p">(.</span>1<span class="o">*</span><span class="n">x</span><span class="p">)</span><span class="o">+</span><span class="nb">sin</span><span class="p">(</span>1<span class="p">.</span>3<span class="o">*</span><span class="n">x</span><span class="p">)</span><span class="o">.*</span><span class="nb">sin</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">-</span><span class="p">.</span>7<span class="o">*</span><span class="nb">sin</span><span class="p">(.</span>5<span class="o">*</span><span class="n">x</span><span class="p">)</span><span class="o">.*</span><span class="nb">cos</span><span class="p">(</span>2<span class="p">.</span>3<span class="o">*</span><span class="n">x</span><span class="p">)</span><span class="o">.*</span><span class="nb">cos</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'><span class="n">x</span> <span class="p">=</span> <span class="nb">linspace</span><span class="p">(</span><span class="o">-</span>10<span class="o">*</span><span class="nb">pi</span><span class="p">,</span> 10<span class="o">*</span><span class="nb">pi</span><span class="p">,</span> <span class="n">N</span><span class="p">);</span>
</span><span class='line'><span class="n">y</span> <span class="p">=</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">subplot</span><span class="p">(</span><span class="n">R</span><span class="p">,</span><span class="n">C</span><span class="p">,</span>1<span class="p">);</span>
</span><span class='line'><span class="n">coef</span> <span class="p">=</span> <span class="n">dct</span><span class="p">(</span><span class="n">y</span><span class="p">)</span><span class="o">&#39;</span><span class="p">;</span>
</span><span class='line'><span class="n">stem</span><span class="p">(</span><span class="n">coef</span><span class="p">);</span>
</span><span class='line'><span class="n">xlim</span><span class="p">([</span>0 <span class="n">N</span><span class="p">]);</span> <span class="n">title</span><span class="p">(</span><span class="s">&#39;Original signal in frequency domain&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">subplot</span><span class="p">(</span><span class="n">R</span><span class="p">,</span><span class="n">C</span><span class="p">,</span>2<span class="p">);</span>
</span><span class='line'><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'><span class="n">xlim</span><span class="p">([</span><span class="n">min</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="n">max</span><span class="p">(</span><span class="n">x</span><span class="p">)]);</span> <span class="n">title</span><span class="p">(</span><span class="s">&#39;Original signal in time domain&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table>
</div>
</figure>
</notextile>
</div>
<p>Let’s assume that we have a device that can sample from the frequency domain. To do this, we create a <em>random measurement matrix</em> to obtain the samples. We use 80 samples here. Note that we normalize the measurement matrix to have orthonormal basis, i.e., the norm of each row is 1, and the dot product of different row is 0.</p>
<div class="bogus-wrapper">
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='matlab'><span class='line'><span class="c">% measurement matrix</span>
</span><span class='line'><span class="n">K</span><span class="p">=</span>80<span class="p">;</span>
</span><span class='line'><span class="n">A</span><span class="p">=</span><span class="nb">randn</span><span class="p">(</span><span class="n">K</span><span class="p">,</span> <span class="n">N</span><span class="p">);</span>
</span><span class='line'><span class="n">A</span><span class="p">=</span><span class="n">orth</span><span class="p">(</span><span class="n">A</span><span class="o">&#39;</span><span class="p">)</span><span class="o">&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c">% observations</span>
</span><span class='line'><span class="n">b</span><span class="p">=</span><span class="n">A</span><span class="o">*</span><span class="n">coef</span><span class="p">;</span>
</span></code></pre></td></tr></table>
</div>
</figure>
</notextile>
</div>
<p>We first try a least-square approach, which boils down to inverse the matrix and obtain <span class="math">\(\hat{x}=A^{-1} b\)</span>. Note that as A is not square, we are using its <em>pseudo-inverse</em> here. Furthermore, as A is othornormal, its transpose is the same as pseudo-inverse.</p>
<div class="bogus-wrapper">
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='matlab'><span class='line'><span class="c">% min-energy observations</span>
</span><span class='line'><span class="n">c0</span> <span class="p">=</span> <span class="n">A</span><span class="o">&#39;*</span><span class="n">b</span><span class="p">;</span> <span class="c">% A&#39; = pinv(A) here since A is a full-rank orthonormal matrix</span>
</span><span class='line'><span class="n">subplot</span><span class="p">(</span><span class="n">R</span><span class="p">,</span><span class="n">C</span><span class="p">,</span>3<span class="p">);</span>
</span><span class='line'><span class="n">stem</span><span class="p">(</span><span class="n">c0</span><span class="p">);</span>
</span><span class='line'><span class="n">xlim</span><span class="p">([</span>0 <span class="n">N</span><span class="p">]);</span> <span class="n">title</span><span class="p">(</span><span class="s">&#39;Minimum energy recovery - coef&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">subplot</span><span class="p">(</span><span class="n">R</span><span class="p">,</span><span class="n">C</span><span class="p">,</span>4<span class="p">);</span>
</span><span class='line'><span class="n">y0</span> <span class="p">=</span> <span class="n">idct</span><span class="p">(</span><span class="n">c0</span><span class="p">,</span> <span class="n">N</span><span class="p">);</span>
</span><span class='line'><span class="n">plot</span><span class="p">(</span>1<span class="p">:</span><span class="n">N</span><span class="p">,</span> <span class="n">y0</span><span class="p">,</span><span class="s">&#39;r&#39;</span><span class="p">,</span> 1<span class="p">:</span><span class="n">N</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">);</span>
</span><span class='line'><span class="n">xlim</span><span class="p">([</span>0 <span class="n">N</span><span class="p">]);</span> <span class="n">title</span><span class="p">(</span><span class="s">&#39;Minimum energy recovery - signal&#39;</span><span class="p">);</span>
</span><span class='line'><span class="n">legend</span><span class="p">(</span><span class="s">&#39;Recovered&#39;</span><span class="p">,</span> <span class="s">&#39;Original&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table>
</div>
</figure>
</notextile>
</div>
<p>As we can see, there are lots of non-zeros in the coefficients, and the recovered signal is very different from the original signal.</p>
<p>Finally, we use L1-minimization for reconstruction. I used <code>lasso</code> to perform a L1-regualarized minimization. Another package that performs various L1-minimization is <a href="http://users.ece.gatech.edu/~justin/l1magic/">l1-magic</a>.</p>
<div class="bogus-wrapper">
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='matlab'><span class='line'><span class="c">% L1-minimization</span>
</span><span class='line'><span class="p">[</span><span class="n">c1</span><span class="p">,</span> <span class="n">fitinfo</span><span class="p">]</span> <span class="p">=</span> <span class="n">lasso</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="s">&#39;Lambda&#39;</span><span class="p">,</span> 0<span class="p">.</span>01<span class="p">);</span>
</span><span class='line'><span class="c">% If use L1-magic</span>
</span><span class='line'><span class="c">% addpath /path/to/l1magic/Optimization</span>
</span><span class='line'><span class="c">% [c1] = l1eq_pd(c0, A, [], b, 1e-4);</span>
</span><span class='line'><span class="n">subplot</span><span class="p">(</span><span class="n">R</span><span class="p">,</span><span class="n">C</span><span class="p">,</span>5<span class="p">);</span>
</span><span class='line'><span class="n">stem</span><span class="p">(</span><span class="n">c1</span><span class="p">);</span>
</span><span class='line'><span class="n">xlim</span><span class="p">([</span>0 <span class="n">N</span><span class="p">]);</span> <span class="n">title</span><span class="p">(</span><span class="s">&#39;L1 recovery - coef&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">subplot</span><span class="p">(</span><span class="n">R</span><span class="p">,</span><span class="n">C</span><span class="p">,</span>6<span class="p">);</span>
</span><span class='line'><span class="n">y1</span> <span class="p">=</span> <span class="n">idct</span><span class="p">(</span><span class="n">c1</span><span class="p">,</span> <span class="n">N</span><span class="p">);</span>
</span><span class='line'><span class="n">plot</span><span class="p">(</span>1<span class="p">:</span><span class="n">N</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">,</span> 1<span class="p">:</span><span class="n">N</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">);</span>
</span><span class='line'><span class="n">xlim</span><span class="p">([</span>0 <span class="n">N</span><span class="p">]);</span> <span class="n">title</span><span class="p">(</span><span class="s">&#39;L1 recovery - signal&#39;</span><span class="p">);</span>
</span><span class='line'><span class="n">legend</span><span class="p">(</span><span class="s">&#39;Recovered&#39;</span><span class="p">,</span> <span class="s">&#39;Original&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table>
</div>
</figure>
</notextile>
</div>
<p>The above shows that L1-minimization successfully recovered the original signal. A complete code snippet can be found <a href="https://gist.github.com/842145ae48381a5a8dca">here</a>.</p>
<div class="references">

</div>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>In order to recover f perfectly, we need at least <span class="math">\(B \log (N)\)</span> samples <a href="http://users.ece.gatech.edu/~justin/l1magic/downloads/papers/CandesRombergTao_revisedNov2005.pdf">(source)</a>.<a href="#fnref1">↩</a></p></li>
</ol>
</section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Comparison of Least Square, L2-regularization and L1-regularization]]></title>
    <link href="http://blog.ivansiu.com/blog/2014/05/14/a-comparison-of-least-square-l2-regularization-and-l1-regularization/"/>
    <updated>2014-05-14T19:32:38-07:00</updated>
    <id>http://blog.ivansiu.com/blog/2014/05/14/a-comparison-of-least-square-l2-regularization-and-l1-regularization</id>
    <content type="html"><![CDATA[<figure>
<img src="https://dl.dropboxusercontent.com/u/3315210/blog/2014-05-14-a-comparison-of-least-square-l2-regularization-and-l1-regularization/coef.png" alt="Recovered Coefficients by Different Methods" /><figcaption>Recovered Coefficients by Different Methods</figcaption>
</figure>
<h1 id="problem-setting">Problem Setting</h1>
<p>Ordinary Least Square (OLS), L2-regularization and L1-regularization are all techniques of finding solutions in a linear system. However, they serve for different purposes. Recently, L1-regularization gains much attention due to its ability in finding sparse solutions. This post demonstrates this by comparing OLS, L2 and L1 regularization.</p>
<!-- more -->

<p>Consider the following linear system:</p>
<p><span class="math">\[Ax = y\]</span></p>
<p>where <span class="math">\(A \in \reals^{m \times n}\)</span>, <span class="math">\(m\)</span> is the number of rows (observations) and <span class="math">\(n\)</span> is the number of columns (variable dimension), <span class="math">\(x\)</span> is the variable coefficients and <span class="math">\(y\)</span> is the response. There are three cases to consider:</p>
<ol type="1">
<li><span class="math">\(m=n\)</span>. This is the common-seen case. If <span class="math">\(A\)</span> is not degenerate, the solution is unique.</li>
<li><span class="math">\(m&gt;n\)</span>. This is called <em>over-determined linear system</em>. There is usually <em>no</em> solutions, but an <em>approximation</em> can be easily found by minimizing the <em>residue cost</em> <span class="math">\(\norm{Ax-y}^2_2\)</span> using least square methods, and it has a nice closed-form solution <span class="math">\(x_{ls}=(A^T A)^{-1} A^T y\)</span>. In L2-regularization, we add a penalize term to minimize the 2-norm of the coefficients. Thus, the objective becomes: <span class="math">\[\min_x \norm{Ax-y}^2_2 + \alpha \norm{x}_2\]</span> where <span class="math">\(\alpha\)</span> is a weight to decide the importance of the regularization.</li>
<li><span class="math">\(m&lt;n\)</span>. This is called <em>under-determined linear system</em>. There is usually no solution or infinite solutions. This is where it get interesting: when we have some prior knowledge in the solution structure, such as sparsity, we can have a ‘metric’ to find a better solution among a whole bunch. The objective is thus: <span class="math">\[\min_x \norm{Ax-y}^2_2 + \alpha \norm{x}_1\]</span> The optimization technique for the above problem is called <a href="http://www-stat.stanford.edu/~tibs/lasso.html">lasso</a>, and there is an advanced version called <a href="http://en.wikipedia.org/wiki/Elastic_net_regularization">elastic net</a>, which <a href="http://scikit-learn.org/stable/modules/linear_model.html#elastic-net">combines the L2 and L1 regularization together</a>, hoping to get the advantages of both: L1 regularization finds sparse solution but introduces a large Mean Square Error (MSE) error, while L2 is better at minimizing MSE.</li>
</ol>
<h2 id="an-example">An Example</h2>
<p>In the following, we show their performances by solving a simple case.</p>
<div class="bogus-wrapper">
<notextile>
<figure class='code'><figcaption>
<span>regression_ex.m</span>
</figcaption>
<div class="highlight">
<table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='matlab'><span class='line'><span class="c">% Compare Ordinary Least square (no regularization), L2-reguarlized (Ridge),</span>
</span><span class='line'><span class="c">% L1-regualarized (Lasso) regression in finding the sparse coefficient</span>
</span><span class='line'><span class="c">% in a underdetermined linear system</span>
</span><span class='line'>
</span><span class='line'><span class="n">rng</span><span class="p">(</span>0<span class="p">);</span>  <span class="c">% for reproducibility</span>
</span><span class='line'><span class="n">m</span> <span class="p">=</span> 50<span class="p">;</span>  <span class="c">% num samples</span>
</span><span class='line'><span class="n">n</span> <span class="p">=</span> 200<span class="p">;</span> <span class="c">% num variables, note that n &gt; m</span>
</span><span class='line'>
</span><span class='line'><span class="n">A</span> <span class="p">=</span> <span class="nb">rand</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'><span class="n">x</span> <span class="p">=</span> <span class="nb">zeros</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> 1<span class="p">);</span>
</span><span class='line'><span class="n">nz</span> <span class="p">=</span> 10<span class="p">;</span> <span class="c">% 10 non-zeros variables (sparse)</span>
</span><span class='line'><span class="n">nz_idx</span> <span class="p">=</span> <span class="n">randperm</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'><span class="n">x</span><span class="p">(</span><span class="n">nz_idx</span><span class="p">(</span>1<span class="p">:</span><span class="n">nz</span><span class="p">))</span> <span class="p">=</span> 3 <span class="o">*</span> <span class="nb">rand</span><span class="p">(</span><span class="n">nz</span><span class="p">,</span> 1<span class="p">);</span>
</span><span class='line'><span class="n">y</span> <span class="p">=</span> <span class="n">A</span><span class="o">*</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'><span class="n">y</span> <span class="p">=</span> <span class="n">y</span> <span class="o">+</span> 0<span class="p">.</span>05 <span class="o">*</span> <span class="nb">rand</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> 1<span class="p">);</span> <span class="c">% add some noise</span>
</span><span class='line'>
</span><span class='line'><span class="c">% plot original x</span>
</span><span class='line'><span class="n">subplot</span><span class="p">(</span>2<span class="p">,</span> 2<span class="p">,</span> 1<span class="p">);</span>
</span><span class='line'><span class="n">bar</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">axis</span> <span class="n">tight</span><span class="p">;</span>
</span><span class='line'><span class="n">title</span><span class="p">(</span><span class="s">&#39;Original coefficients&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c">% OLS</span>
</span><span class='line'><span class="n">x_ols</span> <span class="p">=</span> <span class="n">A</span> <span class="o">\</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'><span class="n">subplot</span><span class="p">(</span>2<span class="p">,</span> 2<span class="p">,</span> 2<span class="p">);</span>
</span><span class='line'><span class="n">bar</span><span class="p">(</span><span class="n">x_ols</span><span class="p">),</span> <span class="n">axis</span> <span class="n">tight</span><span class="p">;</span>
</span><span class='line'><span class="n">title</span><span class="p">(</span><span class="s">&#39;Ordinary Least Square&#39;</span><span class="p">);</span>
</span><span class='line'><span class="n">y_ols</span> <span class="p">=</span> <span class="n">A</span> <span class="o">*</span> <span class="n">x_ols</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c">% L2 (Ridge) </span>
</span><span class='line'><span class="n">x_l2</span> <span class="p">=</span> <span class="n">ridge</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">A</span><span class="p">,</span> 1<span class="n">e</span><span class="o">-</span>5<span class="p">,</span> 0<span class="p">);</span>  <span class="c">% last parameter = 00 to generate intercept term</span>
</span><span class='line'><span class="n">b_l2</span> <span class="p">=</span> <span class="n">x_l2</span><span class="p">(</span>1<span class="p">);</span>
</span><span class='line'><span class="n">x_l2</span> <span class="p">=</span> <span class="n">x_l2</span><span class="p">(</span>2<span class="p">:</span><span class="k">end</span><span class="p">);</span>
</span><span class='line'><span class="n">subplot</span><span class="p">(</span>2<span class="p">,</span> 2<span class="p">,</span> 3<span class="p">);</span>
</span><span class='line'><span class="n">bar</span><span class="p">(</span><span class="n">x_l2</span><span class="p">),</span> <span class="n">axis</span> <span class="n">tight</span><span class="p">;</span>
</span><span class='line'><span class="n">title</span><span class="p">(</span><span class="s">&#39;L2 Regularization&#39;</span><span class="p">);</span>
</span><span class='line'><span class="n">y_l2</span> <span class="p">=</span> <span class="n">A</span> <span class="o">*</span> <span class="n">x_l2</span> <span class="o">+</span> <span class="n">b_l2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c">% L1 (Lasso)</span>
</span><span class='line'><span class="p">[</span><span class="n">x_l1</span><span class="p">,</span> <span class="n">fitinfo</span><span class="p">]</span> <span class="p">=</span> <span class="n">lasso</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="s">&#39;Lambda&#39;</span><span class="p">,</span> 0<span class="p">.</span>1<span class="p">);</span>
</span><span class='line'><span class="n">b_l1</span> <span class="p">=</span> <span class="n">fitinfo</span><span class="p">.</span><span class="n">Intercept</span><span class="p">(</span>1<span class="p">);</span>
</span><span class='line'><span class="n">y_l1</span> <span class="p">=</span> <span class="n">A</span> <span class="o">*</span> <span class="n">x_l1</span> <span class="o">+</span> <span class="n">b_l1</span><span class="p">;</span>
</span><span class='line'><span class="n">subplot</span><span class="p">(</span>2<span class="p">,</span> 2<span class="p">,</span> 4<span class="p">);</span>
</span><span class='line'><span class="n">bar</span><span class="p">(</span><span class="n">x_l1</span><span class="p">),</span> <span class="n">axis</span> <span class="n">tight</span><span class="p">;</span>
</span><span class='line'><span class="n">title</span><span class="p">(</span><span class="s">&#39;L1 Regularization&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c">% L1 (Elastic Net)</span>
</span><span class='line'><span class="p">[</span><span class="n">x_en</span><span class="p">,</span> <span class="n">fitinfo_en</span><span class="p">]</span> <span class="p">=</span> <span class="n">lasso</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="s">&#39;Lambda&#39;</span><span class="p">,</span> 0<span class="p">.</span>1<span class="p">,</span> <span class="s">&#39;Alpha&#39;</span><span class="p">,</span> 0<span class="p">.</span>7<span class="p">);</span>
</span><span class='line'><span class="n">b_en</span> <span class="p">=</span> <span class="n">fitinfo_en</span><span class="p">.</span><span class="n">Intercept</span><span class="p">(</span>1<span class="p">);</span>
</span><span class='line'><span class="n">y_en</span> <span class="p">=</span> <span class="n">A</span> <span class="o">*</span> <span class="n">x_en</span> <span class="o">+</span> <span class="n">b_en</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">MSE_y</span> <span class="p">=</span> <span class="p">[</span><span class="n">mse</span><span class="p">(</span><span class="n">y_ols</span><span class="o">-</span><span class="n">y</span><span class="p">),</span> <span class="n">mse</span><span class="p">(</span><span class="n">y_l2</span><span class="o">-</span><span class="n">y</span><span class="p">),</span> <span class="n">mse</span><span class="p">(</span><span class="n">y_l1</span><span class="o">-</span><span class="n">y</span><span class="p">),</span> <span class="n">mse</span><span class="p">(</span><span class="n">y_en</span><span class="o">-</span><span class="n">y</span><span class="p">)];</span>
</span><span class='line'><span class="nb">disp</span><span class="p">(</span><span class="s">&#39;Mean square error: &#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">fprintf</span><span class="p">(</span><span class="s">&#39;%g    &#39;</span><span class="p">,</span> <span class="n">MSE_y</span><span class="p">);</span> <span class="n">fprintf</span><span class="p">(</span><span class="s">&#39;\n\n&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c">% Plot the recovered coefficients</span>
</span><span class='line'><span class="n">figure</span><span class="p">,</span> <span class="n">hold</span> <span class="n">on</span>
</span><span class='line'><span class="n">plot</span><span class="p">(</span><span class="n">x_l1</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">);</span>
</span><span class='line'><span class="n">plot</span><span class="p">(</span><span class="n">x_en</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">);</span>
</span><span class='line'><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="s">&#39;g--&#39;</span><span class="p">);</span>
</span><span class='line'><span class="n">legend</span><span class="p">(</span><span class="s">&#39;Lasso Coef&#39;</span><span class="p">,</span> <span class="s">&#39;Elastic Net coef&#39;</span><span class="p">,</span> <span class="s">&#39;Original Coef&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table>
</div>
</figure>
</notextile>
</div>
<p>Output:</p>
<div class="bogus-wrapper">
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='matlab'><span class='line'><span class="n">Mean</span> <span class="n">square</span> <span class="n">error</span><span class="p">:</span>
</span><span class='line'>1<span class="p">.</span>81793<span class="n">e</span><span class="o">-</span>29    7<span class="p">.</span>93494<span class="n">e</span><span class="o">-</span>15    0<span class="p">.</span>0975002    0<span class="p">.</span>0641214
</span></code></pre></td></tr></table>
</div>
</figure>
</notextile>
</div>
<p>The above code snippets generates an under-determined matrix <span class="math">\(A\)</span>, and a sparse coefficients which has 200 variables but only 10 of them are non-zeros. Noises are added to the responses. We then run the proposed three methods to try to recover the coefficients. It then generates two plots:</p>
<ol type="1">
<li>The first plot is as shown in the top. As we can see, OLS does a very bad job, though the MSE is minimized to zero. L2-regularization do find some of the sparks, but there are also lots of non-zeros introduced. Finally, L1-regularization finds most of the non-zeros correctly and resembles the original coefficients most.</li>
<li>The second plot shows how similar the recovered coefficients by lasso and elastic nets resemble the original coefficients. As we can see, both of them can recover most parts, while elastic nets contain some small ‘noise’. However, elastic net yields a slightly better MSE than lasso.</li>
</ol>
<figure>
<img src="https://dl.dropboxusercontent.com/u/3315210/blog/2014-05-14-a-comparison-of-least-square-l2-regularization-and-l1-regularization/plot.png" alt="Plot of Coefficients" /><figcaption>Plot of Coefficients</figcaption>
</figure>
<h2 id="probing-further">Probing Further</h2>
<p>Scikit has some excellent examples on regualarization (<a href="http://scikit-learn.org/stable/modules/linear_model.html">1</a>, <a href="http://scikit-learn.org/stable/auto_examples/linear_model/plot_lasso_and_elasticnet.html">2</a>). Quora has an excellent <a href="http://www.quora.com/Machine-Learning/What-is-the-difference-between-L1-and-L2-regularization">discussion</a> on L2 vs L1 regualarization. I found the top three answers very useful in understanding deeper, especially from the <em>Bayesian regularization paradigm</em> perspective by thinking the regularization as MAP (Maximum A Posteriori) that adds a Laplacian (L1) or Gaussian (L2) prior to the original objective.</p>
<div class="references">

</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging AppleScript: print to a file]]></title>
    <link href="http://blog.ivansiu.com/blog/2014/05/02/debugging-applescript-print-to-a-file/"/>
    <updated>2014-05-02T14:26:50-07:00</updated>
    <id>http://blog.ivansiu.com/blog/2014/05/02/debugging-applescript-print-to-a-file</id>
    <content type="html"><![CDATA[<p>Debugging AppleScript is easy when you work with the script editor, simply use <code>log</code> to print out anything in the console. However, after you compiled it to an app, this cannot work anymore.</p>
<p>I find there are several ways to do it in this <a href="http://stackoverflow.com/questions/2749863/applescript-editor-write-message-to-the-result-window">thread</a>. The <a href="http://stackoverflow.com/a/21309748/577704">two approaches</a> that work best for me are:</p>
<!-- more -->

<ol type="1">
<li>Use <code>logger</code> to log to the syslog. E.g.,</li>
</ol>
<div class="bogus-wrapper">
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='applescript'><span class='line'><span class="nb">do shell script</span> <span class="s2">&quot;logger -t &#39;AS DEBUG&#39; &quot;</span> <span class="o">&amp;</span> <span class="nv">myObj</span>
</span></code></pre></td></tr></table>
</div>
</figure>
</notextile>
</div>
<p>However, I don’t know why sometimes this is not logged. So I will use the following:</p>
<ol start="2" type="1">
<li>Echo to file</li>
</ol>
<div class="bogus-wrapper">
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='applescript'><span class='line'><span class="nb">do shell script</span> <span class="s2">&quot;echo &quot;</span> <span class="o">&amp;</span> <span class="nb">quoted form</span> <span class="k">of</span> <span class="p">(</span><span class="nv">myObj</span> <span class="k">as </span><span class="nc">string</span><span class="p">)</span> <span class="o">&amp;</span> <span class="se">¬</span>
</span><span class='line'>    <span class="s2">&quot; &gt;&gt; ~/Desktop/as_debug.txt&quot;</span>
</span></code></pre></td></tr></table>
</div>
</figure>
</notextile>
</div>
<div class="references">

</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X: reveal file in console]]></title>
    <link href="http://blog.ivansiu.com/blog/2014/05/01/os-x-reveal-file-in-console/"/>
    <updated>2014-05-01T17:58:20-07:00</updated>
    <id>http://blog.ivansiu.com/blog/2014/05/01/os-x-reveal-file-in-console</id>
    <content type="html"><![CDATA[<figure>
<img src="https://dl.dropboxusercontent.com/u/3315210/blog/2014-05-01-os-x-reveal-file-in-console.png" />
</figure>
<p>One of the neat things you can do in OS X is to reveal a file in Finder.app from some other applications. Turns out lots of the time, we also want to do that in the terminal. The following script helps you with that:</p>
<!-- more -->

<div class="bogus-wrapper">
<notextile>
<figure class='code'><figcaption>
<span>reveal</span>
</figcaption>
<div class="highlight">
<table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='applescript'><span class='line'><span class="c">#!/usr/bin/osascript</span>
</span><span class='line'><span class="k">on</span> <span class="nb">run</span> <span class="nv">args</span>
</span><span class='line'>  <span class="k">set</span> <span class="nv">fullpath</span> <span class="k">to</span> <span class="nb">do shell script</span> <span class="s2">&quot;realpath &quot;</span> <span class="o">&amp;</span> <span class="p">(</span><span class="nb">quoted form</span> <span class="k">of</span> <span class="nb">first</span> <span class="nb">item</span> <span class="k">of</span> <span class="nv">args</span><span class="p">)</span>
</span><span class='line'>  <span class="k">set</span> <span class="nv">theFile</span> <span class="k">to</span> <span class="nv">POSIX</span> <span class="nv">file</span> <span class="nv">fullpath</span>
</span><span class='line'>  <span class="k">tell</span> <span class="nb">application</span> <span class="s2">&quot;Finder&quot;</span>
</span><span class='line'>      <span class="nv">reveal</span> <span class="nv">theFile</span>
</span><span class='line'>      <span class="nb">activate</span>
</span><span class='line'>  <span class="k">end</span> <span class="k">tell</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table>
</div>
</figure>
</notextile>
</div>
<p>Note:</p>
<ol type="1">
<li>You should put this into a directory in your search path. I recommend in <code>~/bin</code>. Also remember to <code>chmod +x</code>.</li>
<li>The above requires another script <code>realpath</code>, which returns the fullpath of a file. You can find it <a href="http://blog.ivansiu.com/blog/2014/05/01/os-x-get-full-path-of-file-using-realpath/">here</a>.</li>
</ol>
<div class="references">

</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X: get full path of file using realpath]]></title>
    <link href="http://blog.ivansiu.com/blog/2014/05/01/os-x-get-full-path-of-file-using-realpath/"/>
    <updated>2014-05-01T16:25:56-07:00</updated>
    <id>http://blog.ivansiu.com/blog/2014/05/01/os-x-get-full-path-of-file-using-realpath</id>
    <content type="html"><![CDATA[<div class="bogus-wrapper">
<notextile>
<figure class='code'><figcaption>
<span>Demonstrate of realpath</span>
</figcaption>
<div class="highlight">
<table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  /Applications  realpath iBooks.app
</span><span class='line'>/Applications/iBooks.app
</span><span class='line'>➜  /Applications
</span></code></pre></td></tr></table>
</div>
</figure>
</notextile>
</div>
<p><code>realpath</code> is a command line utility that is included in most UNIX distributions but not Mac OS X. Thanks to <a href="https://github.com/harto">Stuart Campbell</a>, a minimal implementation is provided <a href="https://github.com/harto/realpath-osx">here</a>, and my <a href="https://github.com/iveney/realpath-osx">fork</a>.</p>
<!-- more -->

<p>If you use <code>homebrew</code>, you can tap my <a href="https://github.com/iveney/homebrew-mocha">repo</a>, and install it using homebrew.</p>
<div class="bogus-wrapper">
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew tap iveney/mocha
</span><span class='line'>brew install realpath
</span></code></pre></td></tr></table>
</div>
</figure>
</notextile>
</div>
<p>Viola! Now you can get the full path of file in console. A nice thing I often use is to chain it with <code>pbcopy</code> to copy the full path to the OS X clipboard.</p>
<div class="references">

</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Send ctrl-a in tmux after rebinding to it]]></title>
    <link href="http://blog.ivansiu.com/blog/2014/05/01/send-ctrl-a-in-tmux-after-rebinding-to-it/"/>
    <updated>2014-05-01T15:14:46-07:00</updated>
    <id>http://blog.ivansiu.com/blog/2014/05/01/send-ctrl-a-in-tmux-after-rebinding-to-it</id>
    <content type="html"><![CDATA[<figure>
<img src="https://dl.dropboxusercontent.com/u/3315210/blog/2014-05-01-send-ctrl-a-in-tmux-after-rebinding-to-it.png" />
</figure>
<p>While <code>tmux</code> provides much better functionality than <code>screen</code>, most of us that work with tmux have been using <code>screen</code> for a long time, and it is more comfortable for us to use <code>ctrl-a</code> than the default <code>ctrl-b</code>, which is finger-strechy. Thus the first thing I will do after installing <code>tmux</code> is to rebind the prefix to <code>ctrl-a</code>. That gives us the most handy way of swapping last two windows by typing <code>ctrl-a ctrl-a</code>.</p>
<!-- more -->

<p>However, this comes for a price. That is, in a shell environment that is integrated with <code>readline</code>, <code>ctrl-a</code> is used to jump the begining of line. Now that it is mapped as prefix, we can no longer do that.</p>
<p>Surprisingly, the solution is pretty simple. Just use <code>ctrl-a a</code> to send the prefix itself, and use <code>ctrl-a ctrl-a</code> to go to the last window. Specifically, add these two lines in <code>~/.tmux.conf</code>:</p>
<div class="bogus-wrapper">
<notextile>
<figure class='code'><figcaption>
<span>~/.tmux.conf </span>
</figcaption>
<div class="highlight">
<table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">bind </span>a send-prefix
</span><span class='line'><span class="nb">bind</span>-key C-a last-window
</span></code></pre></td></tr></table>
</div>
</figure>
</notextile>
</div>
<p><a href="http://stackoverflow.com/questions/11557076/if-i-set-key-bind-of-c-b-to-c-a-in-tmux-how-can-i-move-the-cursor-to-the-beginni#comment15297769_11561128">via</a>.</p>
<div class="references">

</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Source-highlight for matlab/octave]]></title>
    <link href="http://blog.ivansiu.com/blog/2014/04/30/source-highlight-for-matlab-slash-octave/"/>
    <updated>2014-04-30T23:59:40-07:00</updated>
    <id>http://blog.ivansiu.com/blog/2014/04/30/source-highlight-for-matlab-slash-octave</id>
    <content type="html"><![CDATA[<figure>
<img src="https://dl.dropboxusercontent.com/u/3315210/blog/2014-05-01-source-highlight-for-matlab-slash-octave.png" />
</figure>
<p>I recently worked with Matlab a lot. When in console, sometimes I want to use <code>less</code> to quickly examine the file content, and I have already <a href="http://superuser.com/a/71593">set it up</a> such that it uses <a href="http://www.gnu.org/software/src-highlite/">source-highlight</a> to output colorful escape sequence to the console. However, source-highlight does not come with a syntax support for Matlab by default. Luckily, this <a href="http://blog.sina.com.cn/s/blog_4513dde60100o6o4.html">post</a> and <a href="http://blog.sina.com.cn/s/blog_4513dde60101kpmr.html">this</a> (in Chinese) provides a solution.</p>
<!-- more -->

<p>First of all, install source-highlight using homebrew.</p>
<div class="bogus-wrapper">
<notextile>
<figure class='code'>
<div class="highlight">
<table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install source-highlight</span></code></pre></td></tr></table>
</div>
</figure>
</notextile>
</div>
<p>Note that source-highlight depends on boost, and as of the date of this post, brew provides a precompiled library (bottle) for boost. However, the python support is compiled against the system python, so if you installed a custom one (say installed via homebrew) and use it by default, brew will compile the boost from source instead, which takes an extremely long time. To prevent this, we need to unlink it first, and link it back afterwards. That is,</p>
<div class="bogus-wrapper">
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew unlink python
</span><span class='line'>brew link python    <span class="c"># after installation</span>
</span></code></pre></td></tr></table>
</div>
</figure>
</notextile>
</div>
<p>Go to the following folder and create two files,</p>
<div class="bogus-wrapper">
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> <span class="sb">`</span>brew --prefix <span class="nb">source</span>-highlight<span class="sb">`</span>/share/source-highlight
</span></code></pre></td></tr></table>
</div>
</figure>
</notextile>
</div>
<div class="bogus-wrapper">
<notextile>
<figure class='code'><figcaption>
<span>matlab.style</span>
</figcaption>
<div class="highlight">
<table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="err">keyword</span> <span class="err">blue</span><span class="c1">;</span>
</span><span class='line'><span class="err">string</span> <span class="c1">#a020f0;</span>
</span><span class='line'><span class="err">comment</span> <span class="err">darkgreen</span><span class="c1">;</span>
</span></code></pre></td></tr></table>
</div>
</figure>
</notextile>
</div>
<div class="bogus-wrapper">
<notextile>
<figure class='code'><figcaption>
<span>matlab.lang</span>
</figcaption>
<div class="highlight">
<table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="na">keyword</span> <span class="o">=</span> <span class="s">&quot;break|case|catch|classdef|continue|else|elseif|end|for|function|global|if|otherwise|parfor|persistent|return|spmd|switch|try|while&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="na">keyword</span> <span class="o">=</span> <span class="s">&#39;^\s*(break|case|catch|classdef|continue|else|elseif|end|for|function|global|if|otherwise|parfor|persistent|return|spmd|switch|try|while)(?=\s)&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="err">include</span> <span class="err">&quot;function.lang&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="na">state command start &#39;^\s*[a-zA-Z][\w]*(?</span><span class="o">=</span><span class="s">\s)(?!\s+\.?[*/+-:]\s+\w)(?!\s+=)&#39; begin</span>
</span><span class='line'><span class="s">        comment start &quot;%&quot;</span>
</span><span class='line'><span class="s">        string delim &#39;[[:blank:]]&#39; &#39;[^%;]*&#39;</span>
</span><span class='line'><span class="err">end</span>
</span><span class='line'>
</span><span class='line'><span class="err">comment</span> <span class="err">delim</span> <span class="err">&quot;%{&quot;</span> <span class="err">&quot;%}&quot;</span> <span class="err">multiline</span> <span class="err">nested</span>
</span><span class='line'><span class="err">comment</span> <span class="err">start</span> <span class="err">&quot;%&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="err">string</span> <span class="err">delim</span> <span class="err">&#39;(?&lt;![\w.])\&#39;&#39;</span> <span class="err">&quot;&#39;&quot;</span> <span class="err">escape</span> <span class="err">&quot;&#39;&#39;&quot;</span>
</span></code></pre></td></tr></table>
</div>
</figure>
</notextile>
</div>
<p>Finally, edit <code>lang.map</code> to create a mapping for matlab file.</p>
<div class="bogus-wrapper">
<notextile>
<figure class='code'><figcaption>
<span>lang.map</span>
</figcaption>
<div class="highlight">
<table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s1">&#39;m = matlab.lang&#39;</span> &gt;&gt; lang.map
</span></code></pre></td></tr></table>
</div>
</figure>
</notextile>
</div>
<div class="references">

</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Batch remove photos in iPhone, batch convert videos and upload back]]></title>
    <link href="http://blog.ivansiu.com/blog/2014/01/29/batch-remove-photos-in-iphone/"/>
    <updated>2014-01-29T18:16:21-08:00</updated>
    <id>http://blog.ivansiu.com/blog/2014/01/29/batch-remove-photos-in-iphone</id>
    <content type="html"><![CDATA[<p>One of the problems that drives iOS user crazy is the user-unfriendly manipulation/syncing of photos in iOS. There are just no easy way to remove photos in batch (though you can delete the entire camera roll in the settings).</p>
<!-- more -->

<p>There are several ways to manipulate it, but really not enough:</p>
<ol type="1">
<li>use iPhoto/Aperture to import and delete. However, the photos must be imported first, I cannot just delete it. Ever since there is iCloud, importing becomes not that important.</li>
<li>use iTunes to Sync. Same as above, ever since iCloud, no reason to sync again.</li>
<li>the only way to use built-in tools to manipulate the camera roll is to use Image Capture utility. That way, one can select and delete photos. However, it still does not have custom filtering of photos and does not support albums.</li>
</ol>
<p>The workflow I adopted is a two-step approach: mark those I want to keep in the iPhone, delete all stuff using the 3rd method, then upload back.</p>
<p>If you have some videos that occupy lots of space, you can convert them to lower quality. To do this, HandBrake is the excellent tool, which is open-sourced. However, it does not support batch change. Luckily, <a href="http://www.osomac.com/apps/osx/handbrake-batch/">HandBrakeBatch</a> by <a href="http://www.osomac.com">OSOMAC</a> can achieve this.</p>
<p>To upload things back, <a href="http://rambax.com/simpletransfer.html">SimpleTransfer</a> can help, especially for videos, which cannot be put back into camera roll easily (I have no idea why apple restricts this). The lite version is free, but you can only upload one item at a time, and there are also some restrictions.</p>
<div class="references">

</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fix (ugly) Safari 7.0 not using local pac file]]></title>
    <link href="http://blog.ivansiu.com/blog/2013/12/05/fix-ugly-safari-7-dot-0-not-using-local-pac-file/"/>
    <updated>2013-12-05T00:03:43-08:00</updated>
    <id>http://blog.ivansiu.com/blog/2013/12/05/fix-ugly-safari-7-dot-0-not-using-local-pac-file</id>
    <content type="html"><![CDATA[<p>I found that Safari in Mavericks is not using local <code>proxy.pac</code> at all. Turns out because of sandboxing, it will not allow reading file from local. A traditional solution is to turn on <strong>Web Sharing</strong>, and thus use HTTP to read the pac file such as <code>http://localhost/proxy.pac</code>.</p>
<p>However, this cannot be done that simple, since Apple removed Web Sharing from normal version of Mavericks. To turn on the web service (Apache), do this:</p>
<div class="bogus-wrapper">
<notextile>
<figure class='code'>
<div class="highlight">
<table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apachectl start</span></code></pre></td></tr></table>
</div>
</figure>
</notextile>
</div>
<p>Also, place the pac file under <code>/Library/WebServer/Documents</code>, which is the default Document Root of Apache.</p>
<p>Tom Fischer proposed <a href="https://discussions.apple.com/thread/3202499?start=30&amp;tstart=0">another way</a> to get around, however I don’t think it a good idea to mess around the system files.</p>
<div class="references">

</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LaTeX Tips and Tricks Collection]]></title>
    <link href="http://blog.ivansiu.com/blog/2013/12/03/latex-tips-and-tricks-collection/"/>
    <updated>2013-12-03T15:18:00-08:00</updated>
    <id>http://blog.ivansiu.com/blog/2013/12/03/latex-tips-and-tricks-collection</id>
    <content type="html"><![CDATA[<p>This post summarizes some common useful tips in LaTeX editing.</p>
<!-- more -->

<h2 id="figures">Figures</h2>
<ul>
<li><a href="http://www.howtotex.com/tips-tricks/vertical-alignment-of-subfigures/">Horizontal alignment of subfigures</a></li>
<li><code>subfloat</code> in <code>subfig</code>
<div class="bogus-wrapper">
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='latex'><span class='line'><span class="c">% Style: Figure 1(a)</span>
</span><span class='line'><span class="k">\usepackage</span><span class="na">[subrefformat=parens,labelformat=parens]</span><span class="nb">{</span>subfig<span class="nb">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">\subfloat</span><span class="na">[]</span><span class="nb">{</span>
</span><span class='line'><span class="k">\includegraphics</span><span class="na">[height=\textheight]</span><span class="nb">{</span>example<span class="nb">}</span>
</span><span class='line'><span class="k">\label</span><span class="nb">{</span>fig:example<span class="nb">}</span>
</span><span class='line'><span class="nb">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">\subref*</span><span class="nb">{</span>fig:example<span class="nb">}</span>
</span></code></pre></td></tr></table>
</div>
</figure>
</notextile>
</div></li>
</ul>
<h2 id="bibliography">Bibliography</h2>
<ul>
<li><a href="http://tex.stackexchange.com/questions/12686/how-do-i-run-bibtex-after-using-the-output-directory-flag-with-pdflatex-when-f">How do I run bibtex after using the -output-directory flag with pdflatex, when files are included from subdirectories?</a></li>
<li>biblatex simple usage
<div class="bogus-wrapper">
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='latex'><span class='line'><span class="c">% unsrt, abbrev, last option means use unsrt in \cite[xxx,yyy,ccc]</span>
</span><span class='line'><span class="k">\usepackage</span><span class="na">[sorting=none,firstinits=true,sortcites=true]</span><span class="nb">{</span>biblatex<span class="nb">}</span>
</span><span class='line'>
</span><span class='line'><span class="c">% add this in preamble</span>
</span><span class='line'><span class="k">\bibliography</span><span class="nb">{</span>dsa-verification<span class="nb">}</span>
</span><span class='line'>
</span><span class='line'><span class="c">% at the end</span>
</span><span class='line'><span class="k">\printbibliography</span>
</span></code></pre></td></tr></table>
</div>
</figure>
</notextile>
</div></li>
<li><a href="#bibitemsep">Item spacing</a></li>
</ul>
<h2 id="graphics">Graphics</h2>
<ul>
<li>Graphics path
<div class="bogus-wrapper">
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='latex'><span class='line'><span class="k">\graphicspath</span><span class="nb"></span>
</span></code></pre></td></tr></table>
</div>
</figure>
</notextile>
</div></li>
<li>Use other file extensions:
<div class="bogus-wrapper">
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='latex'><span class='line'><span class="k">\DeclareGraphicsExtensions</span><span class="nb">{</span>.pdf, .jpg, .png<span class="nb">}</span>
</span></code></pre></td></tr></table>
</div>
</figure>
</notextile>
</div></li>
</ul>
<h2 id="table-and-tabular">Table and Tabular</h2>
<ul>
<li>threeparttable: Use footnote in tabular
<div class="bogus-wrapper">
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='latex'><span class='line'><span class="c">% inside tabular:</span>
</span><span class='line'><span class="k">\tnote</span><span class="nb">{</span><span class="s">$</span><span class="nv">\dagger</span><span class="s">$</span><span class="nb">}</span>
</span><span class='line'>
</span><span class='line'><span class="c">% after tabular</span>
</span><span class='line'><span class="k">\begin</span><span class="nb">{</span>tablenotes<span class="nb">}</span>[para] <span class="c">% do not break line between items</span>
</span><span class='line'><span class="k">\item</span> [<span class="s">$</span><span class="nv">\dagger</span><span class="s">$</span>] A foot note. <span class="c">% this reference to the item</span>
</span><span class='line'><span class="k">\end</span><span class="nb">{</span>tablenotes<span class="nb">}</span>
</span></code></pre></td></tr></table>
</div>
</figure>
</notextile>
</div></li>
</ul>
<h2 id="theorem-definition">Theorem, Definition</h2>
<ul>
<li>New definition/theorem
<div class="bogus-wrapper">
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='latex'><span class='line'><span class="k">\newtheorem</span><span class="nb">{</span>definition<span class="nb">}{</span>Definition<span class="nb">}</span>
</span></code></pre></td></tr></table>
</div>
</figure>
</notextile>
</div></li>
<li>Useful packages:
<ul>
<li>ntheorem</li>
<li>amsthm</li>
</ul></li>
</ul>
<h2 id="fonts">Fonts</h2>
<h2 id="packages">Packages</h2>
<ul>
<li>csvsimple: can automatically read csv and create tabular.</li>
<li>algpseudocode: the most updated algorithm / code environment, need to sit inside with <code>algorithm</code> package.</li>
<li>biblatex: provides better control for Bibliography.</li>
<li>multirow: provides <code>\multirow</code> and <code>\multicolumn</code>.</li>
<li>url: provides <code>\url</code>.</li>
<li>xspace: prevent a command eating space.</li>
<li>flushend: provides <code>\flushend</code>, balance two columns.</li>
</ul>
<h2 id="controlling-space">Controlling space</h2>
<ul>
<li>reduce space between float and text
<div class="bogus-wrapper">
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='latex'><span class='line'><span class="k">\setlength</span><span class="nb">{</span><span class="k">\textfloatsep</span><span class="nb">}{</span>10pt plus 1.0pt minus 2.0pt<span class="nb">}</span>
</span><span class='line'><span class="k">\setlength</span><span class="nb">{</span><span class="k">\floatsep</span><span class="nb">}{</span>10pt plus 1.0pt minus 2.0pt<span class="nb">}</span>
</span><span class='line'><span class="k">\setlength</span><span class="nb">{</span><span class="k">\intextsep</span><span class="nb">}{</span>10pt plus 1.0pt minus 2.0pt<span class="nb">}</span>
</span></code></pre></td></tr></table>
</div>
</figure>
</notextile>
</div></li>
<li>reduce bib item separation in biblatex<a name="bibitemsep"></a>
<div class="bogus-wrapper">
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='latex'><span class='line'><span class="k">\setlength\bibitemsep</span><span class="nb">{</span>0.5<span class="k">\itemsep</span><span class="nb">}</span>
</span></code></pre></td></tr></table>
</div>
</figure>
</notextile>
</div></li>
<li>geometry: control the margins at top, bottom, left and right</li>
<li><p>enumitem: control the spacing related to <code>enumerate</code> and <code>itemize</code>.</p></li>
<li><a href="http://gurmeet.net/computer-science/latex-tips-n-tricks-for-conference-papers/">LaTeX Tips n Tricks for Conference Papers</a></li>
<li><a href="http://www.terminally-incoherent.com/blog/2007/09/19/latex-squeezing-the-vertical-white-space/">Latex: Squeezing the Vertical White Space</a></li>
<li><p><a href="http://www.eng.cam.ac.uk/help/tpl/textprocessing/squeeze.html">Squeezing Space in LaTeX</a></p></li>
</ul>
<h2 id="commands-and-tools">Commands and tools:</h2>
<ul>
<li>latexmk: automatically compile multiple times to resolve reference.</li>
<li>biber: replacement for bibtex for <code>biblatex</code></li>
<li>texdoc: use <code>texdoc &lt;package&gt;</code> to search for a manual.</li>
</ul>
<h2 id="ieee">IEEE</h2>
<ul>
<li>proof: use <code>\IEEEproof</code></li>
<li>multiple equations: use <code>\IEEEeqnarray</code> or <code>array</code>.</li>
</ul>
<h2 id="uncategorized">Uncategorized</h2>
<ul>
<li><a href="http://tex.stackexchange.com/questions/1137/where-do-i-place-my-own-sty-files-to-make-them-available-to-all-my-tex-files">Where do I place my own .sty files, to make them available to all my .tex files?</a></li>
<li><a href="http://tex.stackexchange.com/questions/38287/creating-a-central-bibliography">Creating a central bibliography</a></li>
</ul>
<div class="references">

</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Saving $80 by Fixing MagSafe by Yourself]]></title>
    <link href="http://blog.ivansiu.com/blog/2013/11/08/saving-80-dollars-by-fixing-magsafe-by-yourself/"/>
    <updated>2013-11-08T22:06:00-08:00</updated>
    <id>http://blog.ivansiu.com/blog/2013/11/08/saving-80-dollars-by-fixing-magsafe-by-yourself</id>
    <content type="html"><![CDATA[<p>After four years of use, the wire on my MagSafe finally fray out. After searching a bit, I found that a new one costs $80!! My old memories came back: almost all accessories by Apple are rip-offs. See how low the ratings are:</p>
<figure>
<img src="https://lh3.googleusercontent.com/-HbwCGT5IRfg/Un22iAWR3FI/AAAAAAAA6S8/kb8A295sneA/s800/Apple%252085W%2520MagSafe%2520Power%2520Adapter%2520%2528for%252015-%2520and%252017-inch%2520MacBook%2520Pro%2529%2520-%2520Apple%2520Store%2520%2528U.S.%2529.png" />
</figure>
<p>I know that this can be easily fixed if you know a little soldering and have courage: the adapter is working perfectly fine, it is just the wires. I decided to DIY. There are several pretty good articles on how to <a href="http://www.instructables.com/id/How-to-open-and-replace-the-MagSafe-cord-on-an-App/?ALLSTEPS">open the MagSafe</a> and how to <a href="http://www.instructables.com/id/MacBook-Mag-Safe-Charger-Budget-Repair-Disas/">solder it</a>.</p>
<!-- more -->

<p>The following are my workflows. The first step is to open it. You can see there are two wires, in fact in my case only the black wire is broken. I don’t even need to solder.</p>
<table>
<tbody>
<tr class="odd">
<td style="text-align: center;"><img src="https://lh4.googleusercontent.com/-3YuxG4NzMls/Un23QYqlRvI/AAAAAAAA6TI/OHnqW_Mz3_M/s600/IMG_5533.jpg" /></td>
<td style="text-align: center;"><img src="https://lh6.googleusercontent.com/-4Vwfhl0a7U0/Un23UWD3pII/AAAAAAAA6TY/32jW30GJiHo/s600/IMG_5534.jpg" /></td>
</tr>
</tbody>
</table>
<p>Okay, go ahead and twist them. Use insulating tapes to wrap them tight.</p>
<figure>
<img src="https://lh4.googleusercontent.com/-rInGpQS3MPA/Un23Utgk5pI/AAAAAAAA6Tc/XbpbDy2m4yo/s600/IMG_5535.jpg" />
</figure>
<p>Finally, reassemble it and use more tapes, since the outside layer is cut out. More importantly, strong taping help to protect another fray.</p>
<figure>
<img src="https://lh4.googleusercontent.com/-GNyM8TlkwIA/Un23ZUE9GBI/AAAAAAAA6Tk/VUI9YF7zK_Y/s600/IMG_5536.jpg" />
</figure>
<p>It looks a bit odd though, since the Apple product is supposed to be WHITE. Here’s how I fix it. I don’t have good tools available, so I just use whatever I have. I recalled that I have some Google stickers, and I just cut the white pieces out.</p>
<figure>
<img src="https://lh5.googleusercontent.com/-0-qhNqp4ClA/Un23fZLy24I/AAAAAAAA6T4/7MTAsUReDLw/s600/IMG_5537.JPG" />
</figure>
<p>After more taping, it looks like better now. Maybe I should consider wrapping better things outside later.</p>
<figure>
<img src="https://lh3.googleusercontent.com/-Ok8Zop2yeFY/Un23fsZ_1VI/AAAAAAAA6UU/njomi434w70/s600/IMG_5538.jpg" />
</figure>
<p>Hooray! Now it is working again! In fact, I am amazed that this piece of gadget has been working for four years, daily. It is still working just fine :)</p>
<p>There are other common issues for this model, and they can be easily fixed. See my following posts:</p>
<ul>
<li><a href="http://blog.ivansiu.com/blog/2014/05/28/replacing-sata-cable-in-mid-2009-mbp/">Replace faulty SATA cable</a></li>
<li><a href="http://blog.ivansiu.com/blog/2014/05/28/fix-mid-2009-mbp-ram-not-recognized-issue/">Fix unrecognized RAM</a></li>
</ul>
<p><em>If you have similar experience, do not hesitate to let me know. If you find my instruction helpful, leave a comment and share it!</em></p>
<div class="references">

</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Page Components of Octopress: Using Foxslide as An Example]]></title>
    <link href="http://blog.ivansiu.com/blog/2013/10/17/understanding-page-components-of-octopress-using-foxslide-as-an-example/"/>
    <updated>2013-10-17T16:12:00-07:00</updated>
    <id>http://blog.ivansiu.com/blog/2013/10/17/understanding-page-components-of-octopress-using-foxslide-as-an-example</id>
    <content type="html"><![CDATA[<figure>
<img src="https://lh6.googleusercontent.com/-Gq3oxMml8sU/UmBScRSUxhI/AAAAAAAA6SE/0MuhSb9sdWM/s800/foxslide.jpg" />
</figure>
<div class="references">

</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updating Octopress Theme]]></title>
    <link href="http://blog.ivansiu.com/blog/2013/10/17/updating-octopress-theme/"/>
    <updated>2013-10-17T14:54:00-07:00</updated>
    <id>http://blog.ivansiu.com/blog/2013/10/17/updating-octopress-theme</id>
    <content type="html"><![CDATA[<p>The themes are stored in <code>.themes/&lt;name&gt;</code>, we can use the rake command to update either the source or style, as documented in the <a href="http://octopress.org/docs/updating/">office website</a>. However, the syntax should be more clear, i.e.,</p>
<div class="bogus-wrapper">
<notextile>
<figure class='code'>
<div class="highlight">
<table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake update_source['theme name']</span></code></pre></td></tr></table>
</div>
</figure>
</notextile>
</div>
<p>Without the brackets, it defaults to <code>.themes/classic</code>.</p>
<p>Caveats:</p>
<ul>
<li>Do NOT use <code>rake install</code> to install the theme again, since it will overwrite the whole thing, including the files in <code>source/_include/custom</code> directory.</li>
<li>When working on the blog, anything outside of <code>source/_include/custom</code> should be considered the theme. Thus, do not make changes directly in <code>source</code>. Make changes to theme and update the theme to reflect the changes to the blog.</li>
</ul>
<div class="references">

</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Graph Matching: Hopcroft-Karp Algorithm]]></title>
    <link href="http://blog.ivansiu.com/blog/2013/10/08/graph-matching-hopcroft-karp-algorithm/"/>
    <updated>2013-10-08T15:59:00-07:00</updated>
    <id>http://blog.ivansiu.com/blog/2013/10/08/graph-matching-hopcroft-karp-algorithm</id>
    <content type="html"><![CDATA[<h2 id="overview">Overview</h2>
<p>Hopcroft-Karp algorithm also utilizes the augmenting path. The difference between the <a href="http://blog.ivansiu.com/blog/2013/10/07/graph-matching-augmenting-path/">simple augmenting path algorithm</a> is, instead of searching augmenting path one by one, it looks for many paths in the same time. The paths found at each iteration are in fact <strong>vertex disjoint path</strong>. By doing so, the number of iterations can be cut down, since there cannot be too many disjoing paths.</p>
<p>The major observation is that the length of augementing path grows at each step. Thus, if we keep finding a set of vertex disjoint augmenting paths, the algorithm is guaranteed to stop eventually and faster than finding the path one by one.</p>
<!-- more -->

<h2 id="finding-maximal-set-of-vertex-disjoint-paths">Finding Maximal Set of Vertex Disjoint Paths</h2>
<p>Let <span class="math">\(G=(U \cup V, E)\)</span> be the bipartite graph and <span class="math">\(G_M\)</span> be the directed graph w.r.t to matching <span class="math">\(M\)</span>. The <strong>layered graph</strong> is contructed out of <span class="math">\(G_M\)</span>, where the distance at a vertex <span class="math">\(v\)</span> is defined as the length of shortest path from some vertices in <span class="math">\(U\)</span>.</p>
<p>This can done by simply running a modified BFS on <span class="math">\(G_M\)</span>: we start by enqueing all the free vertices <span class="math">\(U&#39;\)</span> in <span class="math">\(U\)</span> and label them as 0 (distance), propagate and label until one or more free vertices in <span class="math">\(V\)</span> are reached. Let the label (distance) be <span class="math">\(k\)</span>, and denote this graph as <span class="math">\(L\)</span>.</p>
<p>We can then run a modified DFS on <span class="math">\(L\)</span>, starting from any of the vertices in <span class="math">\(U&#39;\)</span>. Whenever we reach a free vertices in <span class="math">\(V\)</span>, we delete the path <span class="math">\(p\)</span> from <span class="math">\(L\)</span>, and repeat. It can be proven that all the paths found are shortest vertex disjoint paths of length <span class="math">\(k\)</span>. This set of paths are the maximal set we are looking for.</p>
<h2 id="algorithm-outline">Algorithm Outline</h2>
<ul>
<li>MAXIMAL-SET-OF-PATHS(<span class="math">\(G=(U \cup V, E), M\)</span>)
<ul>
<li><span class="math">\(P \gets \varnothing\)</span></li>
<li><span class="math">\(L \gets \)</span> Run modified BFS on <span class="math">\(G_M\)</span></li>
<li><span class="math">\(U&#39; \gets \)</span> free vertices in <span class="math">\(U\)</span></li>
<li>for <span class="math">\(u \in U&#39;\)</span>
<ul>
<li><span class="math">\(p \gets \)</span> PARTIAL-DFS(<span class="math">\(G, v, T\)</span>)</li>
<li>if <span class="math">\(p \neq \varnothing \)</span>
<ul>
<li><span class="math">\(P = P \cup p\)</span></li>
<li>Remove <span class="math">\(p\)</span> from <span class="math">\(L\)</span></li>
</ul></li>
</ul></li>
<li>return <span class="math">\(P\)</span></li>
</ul></li>
</ul>
<hr />
<ul>
<li>HOPCROFT-KARP(<span class="math">\(G\)</span>)
<ul>
<li><span class="math">\(M \gets \varnothing\)</span></li>
<li>repeat
<ul>
<li><span class="math">\(P \gets \)</span> MAXIMAL-SET-OF-PATHS(<span class="math">\(G, M\)</span>)</li>
<li>if <span class="math">\(P \neq \varnothing\)</span>
<ul>
<li><span class="math">\(M \gets M \oplus P\)</span></li>
</ul></li>
</ul></li>
<li>until <span class="math">\(P = \varnothing\)</span></li>
<li>return <span class="math">\(M\)</span></li>
</ul></li>
</ul>
<h2 id="analysis">Analysis</h2>
<p>It can be shown that the loop will be executed at most <span class="math">\(O(\sqrt{|V|})\)</span> times, and running the DFS and BFS requires <span class="math">\(O(|E|)\)</span> time. Thus the overall run time is <span class="math">\(O(\sqrt{|V|} |E|)\)</span>.</p>
<h2 id="reference">Reference</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Hopcroft-Karp">Wikipedia article</a></li>
<li><a href="http://www.dis.uniroma1.it/~sankowski/lecture2.pdf">Lecture note from Sapienza University of Rome</a></li>
</ul>
<div class="references">

</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Graph Matching: Augmenting Path]]></title>
    <link href="http://blog.ivansiu.com/blog/2013/10/07/graph-matching-augmenting-path/"/>
    <updated>2013-10-07T18:47:00-07:00</updated>
    <id>http://blog.ivansiu.com/blog/2013/10/07/graph-matching-augmenting-path</id>
    <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Let <span class="math">\(G=(V, E)\)</span> be an undirected graph. Matching in <span class="math">\(G\)</span> is a subset of edges <span class="math">\(M \subseteq E\)</span> such that at most one edge is incident to each vertex in <span class="math">\(V\)</span>.</p>
<p>A vertex is <em>matched</em> is it is incident to some edge in <span class="math">\(M\)</span>, otherwise it is called <em>free</em> or <em>exposed</em>.</p>
<h2 id="augmenting-paths">Augmenting Paths</h2>
<ul>
<li>Alternating path: a path in which the edges belong alternatively to the matching and not to the matching</li>
<li>Augmenting path: an alternating path that starts from and ends on exposed vertices</li>
</ul>
<p>Clearly, an augmenting path can be ‘flipped’ to increase the matching size <strong>by one</strong>, i.e., just make free vertex matched and make matched vertex free in this path.</p>
<p><strong>Berge’s Theorem</strong>: The matching M is maximum <strong>iff</strong> there is no augmenting path w.r.t. <span class="math">\(M\)</span>. I personally think the proof is easy but quite powerful.</p>
<p>Thus, we can immediately use the theorem to design an algorithm: find augmenting path iteratively until no more can be found. The problem is how we can find the augmenting path.</p>
<!-- more -->

<h2 id="algorithm-for-bipartite-graph">Algorithm for bipartite graph</h2>
<p>FIND-AUGMENTING-PATH(<span class="math">\(G=(V_1 \cup V_2, E), M\)</span>)</p>
<ul>
<li><span class="math">\(V&#39;_1\)</span> = a set of free vertices in <span class="math">\(V_1\)</span></li>
<li><span class="math">\(V&#39;_2\)</span> = a set of free vertices in <span class="math">\(V_2\)</span></li>
<li>Construct the directed graph <span class="math">\(G_M = (V_1 \cup V_2, E_M)\)</span>
<ul>
<li><span class="math">\(E_M\)</span> is a set of directed edges such that it includes all arcs from <span class="math">\(V_1\)</span> to <span class="math">\(V_2\)</span>, and all matching arcs from <span class="math">\(V_2\)</span> to <span class="math">\(V_1\)</span></li>
<li>i.e., <span class="math">\(E_M = &#92;{(v_1, v_2) : v_1, v_2 \in E \setminus M, v_1 \in V_1, v_2 \in V_2&#92;} \cup &#92;{(v_2, v_1) : v_1, v_2 \in M, v_1 \in V_1, v_2 \in V_2&#92;}\)</span></li>
</ul></li>
<li>Find a simple path <span class="math">\(p\)</span> from <span class="math">\(V&#39;\_1\)</span> to <span class="math">\(V&#39;\_2\)</span> in <span class="math">\(G_M\)</span></li>
</ul>
<p>Note that the above graph <span class="math">\(G\_M\)</span> is similar to the residual network in network flow. Apparently, <span class="math">\(p\)</span> starts from a free vertex in <span class="math">\(V&#39;\_1\)</span> and ends at another free vertex in <span class="math">\(V&#39;\_2\)</span>, thus it is an augmenting path.</p>
<h2 id="complexity">Complexity</h2>
<p>The maximum size of matching is upper bounded by <span class="math">\(|V|/2\)</span>, and each step, the matching size is incremented by one. Thus, the number of augmenting path found will be at most <span class="math">\(O(|V|)\)</span>. At each step, it takes <span class="math">\(O(|E|)\)</span> to find a path. Thus the overall running time is <span class="math">\(O(|V||E|)\)</span>.</p>
<div class="references">

</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Network Flow: Push-relabel algorithm]]></title>
    <link href="http://blog.ivansiu.com/blog/2013/10/07/network-flow-push-relabel-algorithm/"/>
    <updated>2013-10-07T18:08:00-07:00</updated>
    <id>http://blog.ivansiu.com/blog/2013/10/07/network-flow-push-relabel-algorithm</id>
    <content type="html"><![CDATA[<p>According to CLRS: Many of the asymptotically fastest maximum-flow algorithms are push-relabel algorithms, and the fastest actual implementations of maximum-flow algorithms are based on the push-relabel method. Push-relabel methods also efficiently solve other flow problems, such as the minimum-cost flow problem.</p>
<p>This algorithm has a very different flavor. The overall idea is to generate a ‘preflow’ that may not satisfy the flow properties, and keep ‘pushing’) and ‘elevating’ (relabelling) the vertices until we cannot do that. We then remove the ‘excess’ from the preflow and obtain a valid flow, which is also a max flow. In particular, the in-flow may be larger than out-flow at a vertex. The amount of overflow is called ‘excess’.</p>
<!-- more -->

<p>The intuition behind is this: think of the vertices as platforms that have different height, where initially <span class="math">\(S\)</span> has <span class="math">\(|V|\)</span> height and all other vertices have 0 heights. The flow can only be pushed from higher vertices to lower vertices. Whenever we do not have any flow to push, we find some vertex that has unsaturated out edge to its neighbor vertices to ‘relabel’, i.e., elevating its height such that we can continue to ‘push’. Thus, there are two operations ‘push’ and ‘relabel’ (and thus the name):</p>
<pre><code>push: sending excess from u to v
relabel: increase the height of u to min({v: neighbor of u})+1</code></pre>
<p>The algorithm is as follows:</p>
<pre><code>Initialize s.h = |V|, u.h = 0 for u != s. // u.h is the height of vertex u
For all (s, u), push c(s, u). // saturate all outgoing edges from s.
While there is vertex that can be pushed or relabel
  do push or relabel
End while
return F.</code></pre>
<p>The naive implementation has runtime <span class="math">\(O(|V|^2 |E|)\)</span>, and can be improved to <span class="math">\(O(|V|^3)\)</span>.</p>
<div class="references">

</div>
]]></content>
  </entry>
  
</feed>
